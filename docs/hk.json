[
  {
    "tags": [
      {
        "type": "category",
        "string": "math"
      },
      {
        "type": "name",
        "string": "add"
      },
      {
        "type": "signate",
        "string": "{{add value1 value2 ... valueN}}"
      },
      {
        "type": "param",
        "string": "{...Array<number>|number} values Numbers or arrays of numbers to be added together",
        "name": "values",
        "description": "Numbers or arrays of numbers to be added together",
        "types": "Array.<number>, number",
        "typesDescription": "...<code>Array</code>.&lt;<code>number</code>&gt;|<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": true
      },
      {
        "type": "return",
        "string": "{number}",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Add all values provided and return the result</p>\n",
      "summary": "Add all values provided and return the result",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 15,
    "code": "function add (...args) {\n  args.pop();\n\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"add\" needs at least 1 argument');\n  }\n\n  return flatten(args).reduce((a, b) => a + b, 0);\n};",
    "ctx": {
      "type": "function",
      "name": "add",
      "string": "add()"
    },
    "filename": "src/kit/add.js",
    "signatures": [
      {
        "signature": "add(values)",
        "params": [
          {
            "type": "param",
            "string": "{...Array<number>|number} values Numbers or arrays of numbers to be added together",
            "name": "values",
            "description": "Numbers or arrays of numbers to be added together",
            "types": "Array.<number>, number",
            "typesDescription": "...<code>Array</code>.&lt;<code>number</code>&gt;|<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": true
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{number}",
          "types": "number",
          "typesDescription": "<code>number</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "math"
    ],
    "name": "add",
    "id": "functionadd"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 36,
    "codeStart": 37,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{values a}}',\n\t\t\tinput: { a: [ 'a', 'b', 'c' ] },\n\t\t\toutput: 'a,b,c',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{values a}}',\n\t\t\tinput: { a: { a: 1, b: 2, c: 3 } },\n\t\t\toutput: '1,2,3',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{values a}}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#values a}}<{{this}}>{{else}}no{{/values}}',\n\t\t\tinput: { a: [ 'a', 'b', 'c' ] },\n\t\t\toutput: '<a><b><c>',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#values a}}<{{this}}>{{else}}no{{/values}}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections"
      },
      {
        "type": "signature",
        "string": "{{after items [count]}}"
      },
      {
        "type": "param",
        "string": "{Array}  input Collection",
        "name": "input",
        "description": "Collection",
        "types": "Array",
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Number} [count] Number of items to exclude",
        "name": "count",
        "description": "Number of items to exclude",
        "types": "Number",
        "typesDescription": "<code>Number</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Array} Array excluding the number of items specified",
        "types": "Array",
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Array excluding the number of items specified"
      },
      {
        "type": "signature",
        "string": "{{#after input [count]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/after}}"
      },
      {
        "type": "example",
        "string": "// items = ['a','b','c','d','e','f']\n{{#after items 2}}<span>{{this}}</span>{{/after}}\n// Result: <span>c</span><span>d</span><span>e</span><span>f</span>"
      }
    ],
    "description": {
      "full": "<p>Returns all of the items in the collection after the specified index.\nMay be used inline or as an iterator.</p>\n",
      "summary": "Returns all of the items in the collection after the specified index.\nMay be used inline or as an iterator.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 21,
    "code": "function after (...args) {\n  if (args.length === 1) {\n    throw new Error('Handlebars Helper \"after\" needs at least one parameter');\n  }\n\n  const options = args.pop();\n  const [ input, count ] = args;\n\n  var results = input.slice(count);\n  if (!options.fn) {\n    return results;\n  }\n  if (results.length) {\n    var data = Handlebars.createFrame(options.data);\n    return map(results, (result, key, i) => {\n      data.index = i;\n      data.key = key;\n      data.first = (i === 0);\n      data.last  = (i === results.length - 1);\n      return options.fn(result, { data });\n    }).join('');\n  }\n  return options.inverse(this);\n};",
    "ctx": {
      "type": "function",
      "name": "after",
      "string": "after()"
    },
    "filename": "src/kit/after.js",
    "signatures": [
      {
        "signature": "{{after items [count]}}",
        "params": [
          {
            "type": "param",
            "string": "{Array}  input Collection",
            "name": "input",
            "description": "Collection",
            "types": "Array",
            "typesDescription": "<code>Array</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{Number} [count] Number of items to exclude",
            "name": "count",
            "description": "Number of items to exclude",
            "types": "Number",
            "typesDescription": "<code>Number</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{Array} Array excluding the number of items specified",
          "types": "Array",
          "typesDescription": "<code>Array</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Array excluding the number of items specified"
        }
      },
      {
        "signature": "{{#after input [count]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/after}}",
        "params": [],
        "examples": [
          "// items = ['a','b','c','d','e','f']\n{{#after items 2}}<span>{{this}}</span>{{/after}}\n// Result: <span>c</span><span>d</span><span>e</span><span>f</span>"
        ]
      }
    ],
    "aliases": "",
    "category": [
      "collections"
    ],
    "name": "after",
    "id": "functionafter"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 45,
    "codeStart": 46,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{after a }}',\n\t\t\tinput: { a: [ 1, 2, 3, 4, 5 ] },\n\t\t\toutput: '1,2,3,4,5',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{after a 2}}',\n\t\t\tinput: { a: [ 1, 2, 3, 4, 5 ] },\n\t\t\toutput: '3,4,5',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{after a 6}}',\n\t\t\tinput: { a: [ 1, 2, 3, 4, 5 ] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#after a }}|{{this}}|{{/after}}',\n\t\t\tinput: { a: [ 1, 2, 3, 4, 5 ] },\n\t\t\toutput: '|1||2||3||4||5|',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#after a 2}}|{{this}}|{{/after}}',\n\t\t\tinput: { a: [ 1, 2, 3, 4, 5 ] },\n\t\t\toutput: '|3||4||5|',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#after a 6}}|{{this}}|{{/after}}',\n\t\t\tinput: { a: [ 1, 2, 3, 4, 5 ] },\n\t\t\toutput: '',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections,logic"
      },
      {
        "type": "signature",
        "string": "{{all input}}"
      },
      {
        "type": "param",
        "string": "{array<mixed>|object<mixed>} input Array whose values must all be truthy,\nor an object whose properties must all be truthy",
        "name": "input",
        "description": "Array whose values must all be truthy, or an object whose properties must all be truthy",
        "types": "array.<mixed>, object.<mixed>",
        "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>object</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean}",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#all input}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/all}}"
      },
      {
        "type": "example",
        "string": "{{#all flags}}All flags are true.{{else}}Some or none of the flags are true.{{/all}}"
      },
      {
        "type": "signature",
        "string": "{{all arg1 [... argN]}}"
      },
      {
        "type": "param",
        "string": "{mixed} [argN] Some value to be checked for truthiness",
        "name": "argN",
        "description": "Some value to be checked for truthiness",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{mixed} Returns the first last argument if all are truthy, or else an empty string.",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Returns the first last argument if all are truthy, or else an empty string."
      },
      {
        "type": "signature",
        "string": "{{#all arg1 [... argN]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/all}}"
      },
      {
        "type": "describe",
        "string": "Truthy block will evaluate if all values are truthy. ({this})."
      },
      {
        "type": "param",
        "string": "{mixed} [argN] Some value to be checked for truthiness",
        "name": "argN",
        "description": "Some value to be checked for truthiness",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Tests if all of the values in the provided array or object are truthy.\nMay be used inline or as a conditional block.</p>\n",
      "summary": "Tests if all of the values in the provided array or object are truthy.\nMay be used inline or as a conditional block.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 28,
    "code": "function all (...args) {\n\n  const options = args.pop();\n\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"all\" needs 1 parameter');\n  }\n\n  const result = allUtil(...args);\n\n  if (!options.fn) return result || '';\n\n  return result ? options.fn(this) : options.inverse(this);\n};",
    "ctx": {
      "type": "function",
      "name": "all",
      "string": "all()"
    },
    "filename": "src/kit/all.js",
    "signatures": [
      {
        "signature": "{{all input}}",
        "params": [
          {
            "type": "param",
            "string": "{array<mixed>|object<mixed>} input Array whose values must all be truthy,\nor an object whose properties must all be truthy",
            "name": "input",
            "description": "Array whose values must all be truthy, or an object whose properties must all be truthy",
            "types": "array.<mixed>, object.<mixed>",
            "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>object</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{boolean}",
          "types": "boolean",
          "typesDescription": "<code>boolean</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#all input}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/all}}",
        "params": [],
        "examples": [
          "{{#all flags}}All flags are true.{{else}}Some or none of the flags are true.{{/all}}"
        ]
      },
      {
        "signature": "{{all arg1 [... argN]}}",
        "params": [
          {
            "type": "param",
            "string": "{mixed} [argN] Some value to be checked for truthiness",
            "name": "argN",
            "description": "Some value to be checked for truthiness",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{mixed} Returns the first last argument if all are truthy, or else an empty string.",
          "types": "mixed",
          "typesDescription": "<a href=\"mixed.html\">mixed</a>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Returns the first last argument if all are truthy, or else an empty string."
        }
      },
      {
        "signature": "{{#all arg1 [... argN]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/all}}",
        "params": [
          {
            "type": "param",
            "string": "{mixed} [argN] Some value to be checked for truthiness",
            "name": "argN",
            "description": "Some value to be checked for truthiness",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>Truthy block will evaluate if all values are truthy. ({this}).</p>\n"
      }
    ],
    "aliases": "",
    "category": [
      "collections",
      "logic"
    ],
    "name": "all",
    "id": "functionall"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 42,
    "codeStart": 43,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{all a }}',\n\t\t\tinput: { a: [ 0 ] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a }}',\n\t\t\tinput: { a: [ 0, 0 ] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a }}',\n\t\t\tinput: { a: [ 0, 1 ] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a }}',\n\t\t\tinput: { a: [ 1, 2 ] },\n\t\t\toutput: '2',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a }}',\n\t\t\tinput: { a: {} },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a b}}',\n\t\t\tinput: { a: [], b: 1 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a b}}',\n\t\t\tinput: { a: [ 1 ], b: 1 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a b}}',\n\t\t\tinput: { a: [], b: [ 1 ] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a b}}',\n\t\t\tinput: { a: 0, b: [] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a }}',\n\t\t\tinput: { a: { a: true } },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a }}',\n\t\t\tinput: { a: { a: true, b: false } },\n\t\t\toutput: '',\n\t\t},\n\n\t\t{\n\t\t\ttemplate: '{{#all a }}yes{{else}}no{{/all}}',\n\t\t\tinput: { a: [ 0 ] },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#all a }}yes{{else}}no{{/all}}',\n\t\t\tinput: { a: [ 0, 0 ] },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#all a }}yes{{else}}no{{/all}}',\n\t\t\tinput: { a: [ 0, 1 ] },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#all a }}yes{{else}}no{{/all}}',\n\t\t\tinput: { a: [ 1, 2 ] },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#all a }}yes{{else}}no{{/all}}',\n\t\t\tinput: { a: {} },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#all a }}yes{{else}}no{{/all}}',\n\t\t\tinput: { a: { a: true } },\n\t\t\toutput: 'yes',\n\t\t},\n\n\t\t{\n\t\t\ttemplate: '{{all a b c}}',\n\t\t\tinput: { a: 1, b: 2, c: 0 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a b}}',\n\t\t\tinput: { a: 0, b: 1 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a b}}',\n\t\t\tinput: { a: '', b: '1' },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a b}}',\n\t\t\tinput: { a: '0', b: '1' },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all a}}',\n\t\t\tinput: { a: 1, b: 2, c: 0 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all c}}',\n\t\t\tinput: { a: 1, b: 2, c: 0 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{all \"<div>\"}}',\n\t\t\toutput: '&lt;div&gt;',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{{all \"<div>\"}}}',\n\t\t\toutput: '<div>',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#all a b c}}content{{/all}}',\n\t\t\tinput: { a: 1, b: 2, c: 0 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#all a b}}content{{/all}}',\n\t\t\tinput: { a: 0, b: 0 },\n\t\t\toutput: '' },\n\t\t{\n\t\t\ttemplate: '{{#all a b}}content{{else}}other content{{/all}}',\n\t\t\tinput: { a: 0, b: '' },\n\t\t\toutput: 'other content',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#all a}}content{{/all}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'content',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections,logic"
      },
      {
        "type": "signature",
        "string": "{{any input}}"
      },
      {
        "type": "param",
        "string": "{array<mixed>|object<mixed>} input Array containing any truthy\nvalues, or an object with any property that is truthy",
        "name": "input",
        "description": "Array containing any truthy values, or an object with any property that is truthy",
        "types": "array.<mixed>, object.<mixed>",
        "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>object</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean}",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#any input}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/any}}"
      },
      {
        "type": "example",
        "string": "{{#any flags}}Sore or all flags are true.{{else}}None of the flags are true.{{/any}}"
      },
      {
        "type": "signature",
        "string": "{{any arg1 [... argN]}}"
      },
      {
        "type": "param",
        "string": "{mixed} [argN] Some value to be checked for truthiness",
        "name": "argN",
        "description": "Some value to be checked for truthiness",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean} Returns the first truthy value, or an empty string.",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Returns the first truthy value, or an empty string."
      },
      {
        "type": "signature",
        "string": "{{#any arg1 [... argN]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/all}}"
      },
      {
        "type": "describe",
        "string": "Truthy block will evaluate if any of the values are truthy."
      },
      {
        "type": "param",
        "string": "{mixed} [argN] Some value to be checked for truthiness",
        "name": "argN",
        "description": "Some value to be checked for truthiness",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Tests if any of the values in the provided array or object are truthy.\nMay be used inline or as a conditional block.</p>\n",
      "summary": "Tests if any of the values in the provided array or object are truthy.\nMay be used inline or as a conditional block.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 28,
    "code": "function any (...args) {\n  const options = args.pop();\n\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"any\" needs 1 parameter');\n  }\n\n  let input;\n  if (args.length > 1) {\n    input = args;\n  } else {\n    input = arrayify(args[0]);\n  }\n\n  let result = false;\n  for (const value of input) {\n    if (truthy(value)) {\n      result = value;\n      break;\n    }\n  }\n\n  if (!options.fn) return result || '';\n\n  return result ? options.fn(this) : options.inverse(this);\n};",
    "ctx": {
      "type": "function",
      "name": "any",
      "string": "any()"
    },
    "filename": "src/kit/any.js",
    "signatures": [
      {
        "signature": "{{any input}}",
        "params": [
          {
            "type": "param",
            "string": "{array<mixed>|object<mixed>} input Array containing any truthy\nvalues, or an object with any property that is truthy",
            "name": "input",
            "description": "Array containing any truthy values, or an object with any property that is truthy",
            "types": "array.<mixed>, object.<mixed>",
            "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>object</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{boolean}",
          "types": "boolean",
          "typesDescription": "<code>boolean</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#any input}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/any}}",
        "params": [],
        "examples": [
          "{{#any flags}}Sore or all flags are true.{{else}}None of the flags are true.{{/any}}"
        ]
      },
      {
        "signature": "{{any arg1 [... argN]}}",
        "params": [
          {
            "type": "param",
            "string": "{mixed} [argN] Some value to be checked for truthiness",
            "name": "argN",
            "description": "Some value to be checked for truthiness",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{boolean} Returns the first truthy value, or an empty string.",
          "types": "boolean",
          "typesDescription": "<code>boolean</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Returns the first truthy value, or an empty string."
        }
      },
      {
        "signature": "{{#any arg1 [... argN]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/all}}",
        "params": [
          {
            "type": "param",
            "string": "{mixed} [argN] Some value to be checked for truthiness",
            "name": "argN",
            "description": "Some value to be checked for truthiness",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>Truthy block will evaluate if any of the values are truthy.</p>\n"
      }
    ],
    "aliases": "",
    "category": [
      "collections",
      "logic"
    ],
    "name": "any",
    "id": "functionany"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 54,
    "codeStart": 55,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{any a }}',\n\t\t\tinput: { a: [ 0 ] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a }}',\n\t\t\tinput: { a: [ 0, 0 ] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a }}',\n\t\t\tinput: { a: [ 0, 1 ] },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a }}',\n\t\t\tinput: { a: [ 1, 2 ] },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a }}',\n\t\t\tinput: { a: {} },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a }}',\n\t\t\tinput: { a: { a: true } },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a}}',\n\t\t\tinput: { a: [ 0, [] ] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a}}',\n\t\t\tinput: { a: [ 0, [ -0 ] ] },\n\t\t\toutput: '0',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a}}',\n\t\t\tinput: { a: [ 0, [ 'a' ] ] },\n\t\t\toutput: 'a',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a}}',\n\t\t\tinput: { a: [ 0, [ 1 ] ] },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a}}',\n\t\t\tinput: { a: [ [], [] ] },\n\t\t\toutput: '',\n\t\t},\n\n\t\t{\n\t\t\ttemplate: '{{#any a }}yes{{else}}no{{/any}}',\n\t\t\tinput: { a: [ 0 ] },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#any a }}yes{{else}}no{{/any}}',\n\t\t\tinput: { a: [ 0, 0 ] },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#any a }}yes{{else}}no{{/any}}',\n\t\t\tinput: { a: [ 0, 1 ] },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#any a }}yes{{else}}no{{/any}}',\n\t\t\tinput: { a: [ 1, 2 ] },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#any a }}yes{{else}}no{{/any}}',\n\t\t\tinput: { a: {} },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#any a }}yes{{else}}no{{/any}}',\n\t\t\tinput: { a: { a: true } },\n\t\t\toutput: 'yes',\n\t\t},\n\n\t\t{\n\t\t\ttemplate: '{{any a b c}}',\n\t\t\tinput: { a: 1, b: 2, c: 0 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a b c}}',\n\t\t\tinput: { a: 0, b: 1, c: 2 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a b}}',\n\t\t\tinput: { a: '0', b: '1' },\n\t\t\toutput: '0',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a}}',\n\t\t\tinput: { a: 1, b: 2, c: 0 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any c}}',\n\t\t\tinput: { a: 1, b: 2, c: 0 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any a b c}}',\n\t\t\tinput: { a: [], b: [ 1 ], c: 2 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{any \"<div>\"}}',\n\t\t\toutput: '&lt;div&gt;',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{{any \"<div>\"}}}',\n\t\t\toutput: '<div>',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#any a b c}}content{{/any}}',\n\t\t\tinput: { a: 1, b: 2, c: 0 },\n\t\t\toutput: 'content',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#any a b}}content{{/any}}',\n\t\t\tinput: { a: 0, b: 0 },\n\t\t\toutput: '' },\n\t\t{\n\t\t\ttemplate: '{{#any a b}}content{{else}}other content{{/any}}',\n\t\t\tinput: { a: 0, b: '' },\n\t\t\toutput: 'other content',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#any a}}content{{/any}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'content',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "layout"
      },
      {
        "type": "name",
        "string": "append"
      },
      {
        "type": "signature",
        "string": "{{#append name}}<TEMPLATE>{{/append}}"
      },
      {
        "type": "param",
        "string": "{string} name    Name of the content block to append to",
        "name": "name",
        "description": "Name of the content block to append to",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{null}",
        "types": "",
        "typesDescription": "<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Appends the contained content to a layout block</p>\n",
      "summary": "Appends the contained content to a layout block",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 13,
    "code": "function append (...args) {\n  if (args.length === 1) {\n    throw new Error('Handlebars Helper \"append\" needs 1 parameter');\n  }\n\n  const options = args.pop();\n  const name = args[0];\n\n  this._blocks = this._blocks || {};\n\n  this._blocks[name] = {\n    mode: 'append',\n    fn: options.fn,\n  };\n};",
    "ctx": {
      "type": "function",
      "name": "append",
      "string": "append()"
    },
    "filename": "src/kit/append.js",
    "signatures": [
      {
        "signature": "{{#append name}}<TEMPLATE>{{/append}}",
        "params": [
          {
            "type": "param",
            "string": "{string} name    Name of the content block to append to",
            "name": "name",
            "description": "Name of the content block to append to",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{null}",
          "types": "",
          "typesDescription": "<code>null</code>",
          "optional": false,
          "nullable": true,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "layout"
    ],
    "name": "append",
    "id": "functionappend"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 28,
    "codeStart": 29,
    "code": "}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "layout"
      },
      {
        "type": "name",
        "string": "block"
      },
      {
        "type": "signature",
        "string": "{{block name}}"
      },
      {
        "type": "param",
        "string": "{string} name    Name of the block",
        "name": "name",
        "description": "Name of the block",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string} Defines an area for content to be inserted.`",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Defines an area for content to be inserted.`"
      },
      {
        "type": "signature",
        "string": "{{#block name}}<TEMPLATE>{{/block}}"
      },
      {
        "type": "param",
        "string": "{string} name    Name of the block",
        "name": "name",
        "description": "Name of the block",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string} Defines an area of content that can be appended, prepended, or replaced.`",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Defines an area of content that can be appended, prepended, or replaced.`"
      }
    ],
    "description": {
      "full": "<p>Defines a pluggable content block in a layout partial</p>\n",
      "summary": "Defines a pluggable content block in a layout partial",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 17,
    "code": "function block (...args) {\n  if (args.length === 1) {\n    throw new Error('Handlebars Helper \"block\" needs 1 parameter');\n  }\n\n  const options = args.pop();\n  const name = args[0];\n\n  this._blocks = this._blocks || {};\n\n  var target = this._blocks[name];\n\n  var optionsFn = options.fn || function () { return ''; };\n\n  var result;\n  switch (target && target.fn && target.mode) {\n  case 'append':\n    result = optionsFn(this) + target.fn(this);\n    break;\n  case 'prepend':\n    result = target.fn(this) + optionsFn(this);\n    break;\n  case 'replace':\n    result = target.fn(this);\n    break;\n  default:\n    result = optionsFn(this);\n    break;\n  }\n\n  return new Handlebars.SafeString(result);\n};",
    "ctx": {
      "type": "function",
      "name": "block",
      "string": "block()"
    },
    "filename": "src/kit/block.js",
    "signatures": [
      {
        "signature": "{{block name}}",
        "params": [
          {
            "type": "param",
            "string": "{string} name    Name of the block",
            "name": "name",
            "description": "Name of the block",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string} Defines an area for content to be inserted.`",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Defines an area for content to be inserted.`"
        }
      },
      {
        "signature": "{{#block name}}<TEMPLATE>{{/block}}",
        "params": [
          {
            "type": "param",
            "string": "{string} name    Name of the block",
            "name": "name",
            "description": "Name of the block",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string} Defines an area of content that can be appended, prepended, or replaced.`",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Defines an area of content that can be appended, prepended, or replaced.`"
        }
      }
    ],
    "aliases": "",
    "category": [
      "layout"
    ],
    "name": "block",
    "id": "functionblock"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 49,
    "codeStart": 50,
    "code": "}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "bytes"
      },
      {
        "type": "signature",
        "string": "{{bytes bytecount}}"
      },
      {
        "type": "param",
        "string": "{number} bytecount",
        "name": "bytecount",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Converts a byte count into a human readable format\nExample: 1624 becomes 1.6KB</p>\n",
      "summary": "Converts a byte count into a human readable format\nExample: 1624 becomes 1.6KB",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 14,
    "code": "function bytes (value) {\n  var bytecount = Math.abs(parseInt(value, 10));\n  if (isNaN(bytes)) {\n    // console.error(\"Handlebars helper bytes couldn't parse '\" + value + \"'\");\n    return value; // Graceful degradation\n  }\n\n  var resInt, resValue;\n  var metric = [ 'byte', 'bytes', 'KB', 'MB', 'GB', 'TB' ];\n  if (bytecount === 0) {\n    resInt = resValue = 0;\n  } else {\n    // Base 1000 (rather than 1024) matches Mac OS X\n    resInt = Math.floor(Math.log(bytecount) / Math.log(1000));\n    // No decimals for anything smaller than 1 MB\n    resValue = (bytecount / Math.pow(1000, Math.floor(resInt)));\n    // Only show a decimal place if the decimal will round to something other than .0\n    resValue = resValue.toFixed(resValue % 1 > 0.1 ? 1 : 0);\n    if (bytecount === 1) {\n      resInt = -1; // special case: 1 byte (singular)\n    }\n  }\n  if (resInt + 1 < metric.length) {\n    return resValue + ' ' + metric[resInt + 1];\n  }\n\n  // The number we have is higher than our highest unit, so express it as a value of our highest unit\n  return (resValue * Math.pow(10, metric.length + 2 - resInt)) + ' ' + metric[metric.length - 1];\n};",
    "ctx": {
      "type": "function",
      "name": "bytes",
      "string": "bytes()"
    },
    "filename": "src/kit/bytes.js",
    "signatures": [
      {
        "signature": "{{bytes bytecount}}",
        "params": [
          {
            "type": "param",
            "string": "{number} bytecount",
            "name": "bytecount",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "bytes",
    "id": "functionbytes"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 43,
    "codeStart": 44,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{bytes a}}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: '1 byte',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{bytes a}}',\n\t\t\tinput: { a: -1 },\n\t\t\toutput: '1 byte',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{bytes a}}',\n\t\t\tinput: { a: 2 },\n\t\t\toutput: '2 bytes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{bytes a}}',\n\t\t\tinput: { a: 1100 },\n\t\t\toutput: '1.1 KB',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{bytes a}}',\n\t\t\tinput: { a: 150001 },\n\t\t\toutput: '150 KB',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{bytes a}}',\n\t\t\tinput: { a: 15000001 },\n\t\t\toutput: '15 MB',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{bytes a}}',\n\t\t\tinput: { a: 1500000001 },\n\t\t\toutput: '1.5 GB',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{bytes a}}',\n\t\t\tinput: { a: 15000000000001 },\n\t\t\toutput: '15 TB',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{bytes a}}',\n\t\t\tinput: { a: 1000000000000001 },\n\t\t\toutput: '1000 TB',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "math"
      },
      {
        "type": "name",
        "string": "ceil"
      },
      {
        "type": "signature",
        "string": "{{ceil value}}"
      },
      {
        "type": "param",
        "string": "{float} value",
        "name": "value",
        "description": "",
        "types": "float",
        "typesDescription": "<a href=\"float.html\">float</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{integer}",
        "types": "integer",
        "typesDescription": "<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Rounds up the passed value</p>\n",
      "summary": "Rounds up the passed value",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 13,
    "code": "function ceil (value) {\n  if (arguments.length < 2) {\n    throw new Error('Handlebars Helper \"ceil\" needs 1 parameter minimum');\n  }\n\n  return Math.ceil(parseFloat(value));\n};",
    "ctx": {
      "type": "function",
      "name": "ceil",
      "string": "ceil()"
    },
    "filename": "src/kit/ceil.js",
    "signatures": [
      {
        "signature": "{{ceil value}}",
        "params": [
          {
            "type": "param",
            "string": "{float} value",
            "name": "value",
            "description": "",
            "types": "float",
            "typesDescription": "<a href=\"float.html\">float</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{integer}",
          "types": "integer",
          "typesDescription": "<a href=\"integer.html\">integer</a>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "math"
    ],
    "name": "ceil",
    "id": "functionceil"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 20,
    "codeStart": 21,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{ceil a}}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ceil a}}',\n\t\t\tinput: { a: 0 },\n\t\t\toutput: '0',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ceil a}}',\n\t\t\tinput: { a: 0.1 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ceil a}}',\n\t\t\tinput: { a: 0.55 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ceil a}}',\n\t\t\tinput: { a: 5.6 },\n\t\t\toutput: '6',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "logic"
      },
      {
        "type": "signature",
        "string": "{{compare left [operator] right}}"
      },
      {
        "type": "param",
        "string": "{mixed} left     Left side of the comparison.",
        "name": "left",
        "description": "Left side of the comparison.",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} [operator] If omitted, is assumed to be strict equality.",
        "name": "operator",
        "description": "If omitted, is assumed to be strict equality.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{mixed} right    Right side of the comparison",
        "name": "right",
        "description": "Right side of the comparison",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{mixed} Returns the value of the comparison",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Returns the value of the comparison"
      },
      {
        "type": "signature",
        "string": "{{#compare left [operator] right}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/compare}}"
      },
      {
        "type": "param",
        "string": "{mixed} left     Left side of the comparison.",
        "name": "left",
        "description": "Left side of the comparison.",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} [operator] If omitted, is assumed to be strict equality.",
        "name": "operator",
        "description": "If omitted, is assumed to be strict equality.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{mixed} right    Right side of the comparison",
        "name": "right",
        "description": "Right side of the comparison",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Tests two values for equivalence.\nMay be used inline or as a conditional block.</p>\n<p>Takes the following values as an optional middle argument to identify the comparison to perform.</p>\n<ul>\n<li><code>'=='</code>: Loose equal</li>\n<li><code>'==='</code>: Strict equal</li>\n<li><code>'!='</code>: Loose unequal</li>\n<li><code>'!=='</code>: Strict unequal</li>\n<li><code>'&lt;'</code> : Less than</li>\n<li><code>'&gt;'</code>: Greater than</li>\n<li><code>'&lt;='</code>: Less than or equal</li>\n<li><code>'&gt;='</code>: Greater than or equal</li>\n<li><code>'typeof'</code>: Typeof first argument equals third argument</li>\n<li><code>'!typeof'</code>: Typeof first argument does not equal third argument</li>\n<li><code>'%'</code>: Modulus of first and third arguments (inline returns result; block evaluates truthy for non-0 result)</li>\n<li><code>'!%'</code>: Modulus of first and third arguments is non-0</li>\n</ul>\n",
      "summary": "Tests two values for equivalence.\nMay be used inline or as a conditional block.",
      "body": "Takes the following values as an optional middle argument to identify the comparison to perform.\n\n- `'=='`: Loose equal\n- `'==='`: Strict equal\n- `'!='`: Loose unequal\n- `'!=='`: Strict unequal\n- `'<'` : Less than\n- `'>'`: Greater than\n- `'<='`: Less than or equal\n- `'>='`: Greater than or equal\n- `'typeof'`: Typeof first argument equals third argument\n- `'!typeof'`: Typeof first argument does not equal third argument\n- `'%'`: Modulus of first and third arguments (inline returns result; block evaluates truthy for non-0 result)\n- `'!%'`: Modulus of first and third arguments is non-0"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 37,
    "code": "function compare (...args) {\n  const options = args.pop();\n\n  let left, operator, right;\n  if (args.length === 2) {\n    [ left, right ] = args;\n    operator = '===';\n  } else if (args.length === 3) {\n    [ left, operator, right ] = args;\n  } else {\n    throw new Error('Handlebars Helper \"compare\" needs 2 or 3 parameters');\n  }\n\n  var operators = {\n    '==':      (l, r) => l == r, // eslint-disable-line eqeqeq\n    '===':     (l, r) => l === r,\n    '!=':      (l, r) => l != r, // eslint-disable-line eqeqeq\n    '!==':     (l, r) => l !== r,\n    '<':       (l, r) => l < r,\n    '>':       (l, r) => l > r,\n    '<=':      (l, r) => l <= r,\n    '>=':      (l, r) => l >= r,\n    'typeof':  (l, r) => typeof l === r, // eslint-disable-line valid-typeof\n    '!typeof': (l, r) => typeof l !== r, // eslint-disable-line valid-typeof\n    '%':       (l, r) => l % r,\n    '!%':      (l, r) => l % r === 0,\n  };\n\n  if (!operators[operator]) {\n    throw new Error('Handlebars Helper \"compare\" does not know the operator ' + operator);\n  }\n\n  var result = !!operators[operator](left, right);\n\n  if (!options.fn) return result || '';\n\n  return result ? options.fn(this) : options.inverse(this);\n};",
    "ctx": {
      "type": "function",
      "name": "compare",
      "string": "compare()"
    },
    "filename": "src/kit/compare.js",
    "signatures": [
      {
        "signature": "{{compare left [operator] right}}",
        "params": [
          {
            "type": "param",
            "string": "{mixed} left     Left side of the comparison.",
            "name": "left",
            "description": "Left side of the comparison.",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} [operator] If omitted, is assumed to be strict equality.",
            "name": "operator",
            "description": "If omitted, is assumed to be strict equality.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{mixed} right    Right side of the comparison",
            "name": "right",
            "description": "Right side of the comparison",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{mixed} Returns the value of the comparison",
          "types": "mixed",
          "typesDescription": "<a href=\"mixed.html\">mixed</a>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Returns the value of the comparison"
        }
      },
      {
        "signature": "{{#compare left [operator] right}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/compare}}",
        "params": [
          {
            "type": "param",
            "string": "{mixed} left     Left side of the comparison.",
            "name": "left",
            "description": "Left side of the comparison.",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} [operator] If omitted, is assumed to be strict equality.",
            "name": "operator",
            "description": "If omitted, is assumed to be strict equality.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{mixed} right    Right side of the comparison",
            "name": "right",
            "description": "Right side of the comparison",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": []
      }
    ],
    "aliases": "",
    "category": [
      "logic"
    ],
    "name": "compare",
    "id": "functioncompare"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 76,
    "codeStart": 77,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{compare a b}}',\n\t\t\tinput: { a: 1, b: 1 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{compare a \"===\" b}}',\n\t\t\tinput: { a: 1, b: 1 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{compare a \"===\" b}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{compare a \"==\" b}}',\n\t\t\tinput: { a: 1, b: '1' },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{compare a \"==\" b}}',\n\t\t\tinput: { a: 1, b: '0' },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{compare a \"typeof\" b}}',\n\t\t\tinput: { a: 1, b: 'number' },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{compare a \"!typeof\" b}}',\n\t\t\tinput: { a: 1, b: 'number' },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{compare a \"%\" b}}',\n\t\t\tinput: { a: 11, b: 2 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{compare a \"%\" b}}',\n\t\t\tinput: { a: 10, b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{compare a \"!%\" b}}',\n\t\t\tinput: { a: 11, b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{compare a \"!%\" b}}',\n\t\t\tinput: { a: 10, b: 2 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#compare a b}}content{{/compare}}',\n\t\t\tinput: { a: 1, b: 1 },\n\t\t\toutput: 'content',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#compare a b}}content a{{else}}content b{{/compare}}',\n\t\t\tinput: { a: 1, b: 1 },\n\t\t\toutput: 'content a',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#compare a b}}content a{{else}}content b{{/compare}}',\n\t\t\tinput: { a: 1, b: 0 },\n\t\t\toutput: 'content b',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "layout"
      },
      {
        "type": "name",
        "string": "content"
      },
      {
        "type": "signature",
        "string": "{{#block name}}<TEMPLATE>{{/block}}"
      },
      {
        "type": "param",
        "string": "{string} name    Name of the block to fill",
        "name": "name",
        "description": "Name of the block to fill",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{null}",
        "types": "",
        "typesDescription": "<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Replaces the contents of a layout block with the contained content</p>\n",
      "summary": "Replaces the contents of a layout block with the contained content",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 13,
    "code": "function content (...args) {\n  if (args.length === 1) {\n    throw new Error('Handlebars Helper \"content\" needs 1 parameter');\n  }\n\n  const options = args.pop();\n  const name = args[0];\n\n  this._blocks = this._blocks || {};\n\n  this._blocks[name] = {\n    mode: args[1] || 'replace',\n    fn: options.fn,\n  };\n};",
    "ctx": {
      "type": "function",
      "name": "content",
      "string": "content()"
    },
    "filename": "src/kit/content.js",
    "signatures": [
      {
        "signature": "{{#block name}}<TEMPLATE>{{/block}}",
        "params": [
          {
            "type": "param",
            "string": "{string} name    Name of the block to fill",
            "name": "name",
            "description": "Name of the block to fill",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{null}",
          "types": "",
          "typesDescription": "<code>null</code>",
          "optional": false,
          "nullable": true,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "layout"
    ],
    "name": "content",
    "id": "functioncontent"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 28,
    "codeStart": 29,
    "code": "}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "dates"
      },
      {
        "type": "name",
        "string": "date"
      },
      {
        "type": "signature",
        "string": "{{date format}}"
      },
      {
        "type": "describe",
        "string": "Outputs the current date/time"
      },
      {
        "type": "param",
        "string": "{string} format  Moment formatting",
        "name": "format",
        "description": "Moment formatting",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{date input format [parse=<string>]}}"
      },
      {
        "type": "param",
        "string": "{string} format  Moment formatting",
        "name": "format",
        "description": "Moment formatting",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string|Date} input   The date value to be formatted. Must be either a\nDate object, parsable by Date(input), or parsable using a providing parsing string.",
        "name": "input",
        "description": "The date value to be formatted. Must be either a Date object, parsable by Date(input), or parsable using a providing parsing string.",
        "types": "string, Date",
        "typesDescription": "<code>string</code>|<code>Date</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} [parse] If a `parse` attribute is provided, it will be used for\ninstructing moment on how to parse the input.",
        "name": "parse",
        "description": "If a `parse` attribute is provided, it will be used for instructing moment on how to parse the input.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Outputs a date formatted using moment notation.\nDepends on the <code>moment</code> library. Moment will be searched for by first accessing a\n<code>require</code> function (if present) before checking global contexts.</p>\n",
      "summary": "Outputs a date formatted using moment notation.\nDepends on the `moment` library. Moment will be searched for by first accessing a\n`require` function (if present) before checking global contexts.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 8,
    "codeStart": 29,
    "code": "function date (...args) {\n  const options = args.pop();\n  let format, input;\n\n  switch (args.length) {\n  case 0:\n    format = 'yyyy-MM-dd HH:mm:ss';\n    input = new Date();\n    break;\n  case 1:\n    format = args[0];\n    input = new Date();\n    break;\n  case 2:\n    var parsePattern = options.hash && options.hash.parse;\n    if (parsePattern) {\n      input = parse(args[0], parsePattern, new Date());\n    } else {\n      input = new Date(args[0]);\n    }\n    format = args[1];\n    break;\n  default:\n    return '';\n  }\n\n  if (!isValid(input)) {\n    // console.trace('Invalid input for Handlebars Helper \"date\"', { input, ...options.hash }); // eslint-disable-line\n    return '';\n  }\n\n  return dateFormat(input, format);\n};",
    "ctx": {
      "type": "function",
      "name": "date",
      "string": "date()"
    },
    "filename": "src/kit/date.js",
    "signatures": [
      {
        "signature": "{{date format}}",
        "params": [
          {
            "type": "param",
            "string": "{string} format  Moment formatting",
            "name": "format",
            "description": "Moment formatting",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>Outputs the current date/time</p>\n",
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{date input format [parse=<string>]}}",
        "params": [
          {
            "type": "param",
            "string": "{string} format  Moment formatting",
            "name": "format",
            "description": "Moment formatting",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string|Date} input   The date value to be formatted. Must be either a\nDate object, parsable by Date(input), or parsable using a providing parsing string.",
            "name": "input",
            "description": "The date value to be formatted. Must be either a Date object, parsable by Date(input), or parsable using a providing parsing string.",
            "types": "string, Date",
            "typesDescription": "<code>string</code>|<code>Date</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} [parse] If a `parse` attribute is provided, it will be used for\ninstructing moment on how to parse the input.",
            "name": "parse",
            "description": "If a `parse` attribute is provided, it will be used for instructing moment on how to parse the input.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "dates"
    ],
    "name": "date",
    "id": "functiondate"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 63,
    "codeStart": 64,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{date}}',\n\t\t\toutput: dateFormat(new Date(), 'yyyy-MM-dd HH:mm:ss'),\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{date a}}',\n\t\t\tinput: { a: 'MMM Mo, yyyy' },\n\t\t\toutput: dateFormat(new Date(), 'MMM Mo, yyyy'),\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{date b a}}',\n\t\t\tinput: { a: 'MMM Mo, yyyy', b: '1-1-2010' },\n\t\t\toutput: 'Jan 1st, 2010',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{date b a}}',\n\t\t\tinput: { a: 'MMM do, yyyy', b: '2020-01-05T01:49:05.156Z' },\n\t\t\toutput: 'Jan 4th, 2020',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{date b a parse=c}}',\n\t\t\tinput: { a: 'MMM do, yyyy', b: '12,02,2010', c: 'MM,dd,yyyy' },\n\t\t\toutput: 'Dec 2nd, 2010',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{date b a}}',\n\t\t\tinput: { a: 'MMM Mo, yyyy', b: 'dsaADFASDF' },\n\t\t\toutput: '',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "math"
      },
      {
        "type": "name",
        "string": "div"
      },
      {
        "type": "signature",
        "string": "{{div value1 value2 ... valueN}}"
      },
      {
        "type": "param",
        "string": "{number} value1",
        "name": "value1",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} value2",
        "name": "value2",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} [valueN]",
        "name": "valueN",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{number}",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Divides two or more values.\nIf more than two values are provided, the result of the previous two division will be divided with the next.\nIf any value is 0, the result of the division will be zero.</p>\n",
      "summary": "Divides two or more values.\nIf more than two values are provided, the result of the previous two division will be divided with the next.\nIf any value is 0, the result of the division will be zero.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 19,
    "code": "function div (...args) {\n  args.pop();\n\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"div\" needs 1 parameter minimum');\n  }\n\n  let value;\n  function descend (level) {\n    if (isArray(level)) {\n      level.forEach(descend);\n    } else if (isUndefined(value)) {\n      value = parseFloat(level);\n    } else if (level) {\n      level = parseFloat(level);\n      value = level ? (value / level) : 0;\n    }\n  }\n\n  descend(args);\n\n  return value;\n};",
    "ctx": {
      "type": "function",
      "name": "div",
      "string": "div()"
    },
    "filename": "src/kit/div.js",
    "signatures": [
      {
        "signature": "{{div value1 value2 ... valueN}}",
        "params": [
          {
            "type": "param",
            "string": "{number} value1",
            "name": "value1",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} value2",
            "name": "value2",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} [valueN]",
            "name": "valueN",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{number}",
          "types": "number",
          "typesDescription": "<code>number</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "math"
    ],
    "name": "div",
    "id": "functiondiv"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 42,
    "codeStart": 43,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{div a b c d}}',\n\t\t\tinput: { a: [ 10000, 2 ], b: 4, c: 5 },\n\t\t\toutput: '250',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{div a b}}',\n\t\t\tinput: { a: 10000, b: 0 },\n\t\t\toutput: '10000', // ignores non-divisable values\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{div a}}',\n\t\t\tinput: { a: [ 100, 2, 4 ] },\n\t\t\toutput: '12.5',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{div a b}}',\n\t\t\tinput: { a: 10, b: 2 },\n\t\t\toutput: '5',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections"
      },
      {
        "type": "signature",
        "string": "{{empty input}}"
      },
      {
        "type": "param",
        "string": "{string|array|object} input",
        "name": "input",
        "description": "",
        "types": "string, array, object",
        "typesDescription": "<code>string</code>|<code>array</code>|<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean|string} Returns an empty string on false",
        "types": "boolean, string",
        "typesDescription": "<code>boolean</code>|<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Returns an empty string on false"
      },
      {
        "type": "signature",
        "string": "{{#empty input}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/empty}}"
      },
      {
        "type": "example",
        "string": "// items = ['a']\n{{#empty items}}is empty{{else}}is not empty{{/empty}}\n// Result: 'is not empty'"
      }
    ],
    "description": {
      "full": "<p>Tests if the provided input is empty (string, array or object)\nMay be used inline or as a conditional block.</p>\n",
      "summary": "Tests if the provided input is empty (string, array or object)\nMay be used inline or as a conditional block.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 20,
    "code": "function empty (...args) {\n  const options = args.pop();\n  const [ input ] = args;\n\n  var result = !sizeOf(input);\n\n  if (!options.fn) {\n    return result || '';\n  }\n  return result ? options.fn(this) : options.inverse(this);\n\n};",
    "ctx": {
      "type": "function",
      "name": "empty",
      "string": "empty()"
    },
    "filename": "src/kit/empty.js",
    "signatures": [
      {
        "signature": "{{empty input}}",
        "params": [
          {
            "type": "param",
            "string": "{string|array|object} input",
            "name": "input",
            "description": "",
            "types": "string, array, object",
            "typesDescription": "<code>string</code>|<code>array</code>|<code>object</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{boolean|string} Returns an empty string on false",
          "types": "boolean, string",
          "typesDescription": "<code>boolean</code>|<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Returns an empty string on false"
        }
      },
      {
        "signature": "{{#empty input}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/empty}}",
        "params": [],
        "examples": [
          "// items = ['a']\n{{#empty items}}is empty{{else}}is not empty{{/empty}}\n// Result: 'is not empty'"
        ]
      }
    ],
    "aliases": "",
    "category": [
      "collections"
    ],
    "name": "empty",
    "id": "functionempty"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 32,
    "codeStart": 33,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{empty a }}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{empty a }}',\n\t\t\tinput: { a: '' },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{empty a }}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{empty a }}',\n\t\t\tinput: { a: {} },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{empty a }}',\n\t\t\tinput: { a: [ 0 ] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{empty a }}',\n\t\t\tinput: { a: [ 1 ] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{empty a }}',\n\t\t\tinput: { a: { a: 0 } },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{empty a }}',\n\t\t\tinput: { a: { a: 1 } },\n\t\t\toutput: '',\n\t\t},\n\n\t\t{\n\t\t\ttemplate: '{{#empty a }}yes{{else}}no{{/empty}}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#empty a }}yes{{else}}no{{/empty}}',\n\t\t\tinput: { a: '' },\n\t\t\toutput: 'yes',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "endsWith"
      },
      {
        "type": "signature",
        "string": "{{endsWith haystack needle}}"
      },
      {
        "type": "param",
        "string": "{string} haystack String to search inside",
        "name": "haystack",
        "description": "String to search inside",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} needle String to search for. If `regex=true` then the string is evaluated as a regular expression.",
        "name": "needle",
        "description": "String to search for. If `regex=true` then the string is evaluated as a regular expression.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "describe",
        "string": "Returns true if the haystack ends with the needle"
      },
      {
        "type": "return",
        "string": "{boolean}",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#endsWith haystack needle}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/endsWith}}"
      },
      {
        "type": "param",
        "string": "{string} haystack String to search inside",
        "name": "haystack",
        "description": "String to search inside",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} needle String to search for. If `regex=true` then the string is evaluated as a regular expression.",
        "name": "needle",
        "description": "String to search for. If `regex=true` then the string is evaluated as a regular expression.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "describe",
        "string": "If the string does contain that value, block will evaluate with the result value as the current context ({this})."
      }
    ],
    "description": {
      "full": "<p>Tests if the haystack ends with the needle value</p>\n",
      "summary": "Tests if the haystack ends with the needle value",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 22,
    "code": "function endsWith (...args) {\n  if (args.length !== 3) {\n    throw new Error('Handlebars Helper \"endsWith\" needs 2 parameters');\n  }\n\n  const options = args.pop();\n  const [ haystack, needle ] = args;\n  let result;\n\n  if (isArray(haystack)) {\n    result = haystack[haystack.length - 1] === needle;\n  } else if (isString(haystack)) {\n    result = haystack.endsWith(needle);\n  } else {\n    result = false;\n  }\n\n  if (!options.fn) {\n    return result || '';\n  }\n\n  return result ? options.fn(this) : options.inverse(this);\n};",
    "ctx": {
      "type": "function",
      "name": "endsWith",
      "string": "endsWith()"
    },
    "filename": "src/kit/endsWith.js",
    "signatures": [
      {
        "signature": "{{endsWith haystack needle}}",
        "params": [
          {
            "type": "param",
            "string": "{string} haystack String to search inside",
            "name": "haystack",
            "description": "String to search inside",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} needle String to search for. If `regex=true` then the string is evaluated as a regular expression.",
            "name": "needle",
            "description": "String to search for. If `regex=true` then the string is evaluated as a regular expression.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>Returns true if the haystack ends with the needle</p>\n",
        "returns": {
          "type": "return",
          "string": "{boolean}",
          "types": "boolean",
          "typesDescription": "<code>boolean</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#endsWith haystack needle}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/endsWith}}",
        "params": [
          {
            "type": "param",
            "string": "{string} haystack String to search inside",
            "name": "haystack",
            "description": "String to search inside",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} needle String to search for. If `regex=true` then the string is evaluated as a regular expression.",
            "name": "needle",
            "description": "String to search for. If `regex=true` then the string is evaluated as a regular expression.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>If the string does contain that value, block will evaluate with the result value as the current context ({this}).</p>\n"
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "endsWith",
    "id": "functionendsWith"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 45,
    "codeStart": 46,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{endsWith a b}}',\n\t\t\tinput: { a: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et', b: 'et' },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{endsWith a b}}',\n\t\t\tinput: { a: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et', b: 'es' },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#endsWith a b}}yes{{else}}no{{/endsWith}}',\n\t\t\tinput: { a: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et', b: 'et' },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#endsWith a b}}yes{{else}}no{{/endsWith}}',\n\t\t\tinput: { a: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et', b: 'es' },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "layout"
      },
      {
        "type": "name",
        "string": "extend"
      },
      {
        "type": "signature",
        "string": "{{#extend name}}<TEMPLATE>{{/extend}}"
      },
      {
        "type": "param",
        "string": "{string} layout  The name of the Handlebars partial to be used.",
        "name": "layout",
        "description": "The name of the Handlebars partial to be used.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Defines collection of layout cells to be filled into a layout partial. This function wraps a\nseries of <code>append</code>, <code>prepend</code> and <code>content</code> calls. The content instructions inside are evaluated\nand then the named partial is evaluated using the data defined by those instructions. All other\ncontained text is disposed of.</p>\n",
      "summary": "Defines collection of layout cells to be filled into a layout partial. This function wraps a\nseries of `append`, `prepend` and `content` calls. The content instructions inside are evaluated\nand then the named partial is evaluated using the data defined by those instructions. All other\ncontained text is disposed of.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 16,
    "code": "function extend (...args) {\n  if (args.length === 1) {\n    throw new Error('Handlebars Helper \"extend\" needs 1 parameter');\n  }\n\n  const options = args.pop();\n  const name = args[0];\n\n  var context = Object.create(this || null);\n  var template = Handlebars.partials[name];\n\n  if (typeof template === 'undefined') {\n    throw new Error(\"Missing layout: '\" + name + \"'\");\n  }\n\n  if (typeof template === 'string') {\n    template = Handlebars.compile(template);\n  }\n\n  if (options.fn) {\n    // run the contents of the embed so that the content blocks apply\n    // but don't use the output.\n    options.fn(context);\n  }\n\n  return new Handlebars.SafeString(template(context));\n};",
    "ctx": {
      "type": "function",
      "name": "extend",
      "string": "extend()"
    },
    "filename": "src/kit/extend.js",
    "signatures": [
      {
        "signature": "{{#extend name}}<TEMPLATE>{{/extend}}",
        "params": [
          {
            "type": "param",
            "string": "{string} layout  The name of the Handlebars partial to be used.",
            "name": "layout",
            "description": "The name of the Handlebars partial to be used.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "layout"
    ],
    "name": "extend",
    "id": "functionextend"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 43,
    "codeStart": 44,
    "code": "}\n\nexport function test () {\n\t// no tests\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections"
      },
      {
        "type": "signature",
        "string": "{{filter input}} or {{#filter input}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/filter}}"
      },
      {
        "type": "describe",
        "string": "Filter all falsy items (`0`, `''`, `false`, `null`, `undefined`, etc)."
      },
      {
        "type": "param",
        "string": "{array<mixed>} input",
        "name": "input",
        "description": "",
        "types": "array.<mixed>",
        "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{array}",
        "types": "array",
        "typesDescription": "<code>array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "example",
        "string": "// items = [0, 1, null, 'test']\n{{#filter items}}<p>{{this}}</p>{{/filter}}\n// Result: <p>1</p><p>test</p>"
      },
      {
        "type": "signature",
        "string": "{{filter input predicate}} or {{#filter input predicate}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/filter}}"
      },
      {
        "type": "describe",
        "string": "Filter all items matching the passed predicate. Else condition evaluates if result is empty. This format matches the predicate rules of the lodash filter function."
      },
      {
        "type": "param",
        "string": "{array<mixed>} input",
        "name": "input",
        "description": "",
        "types": "array.<mixed>",
        "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{mixed} value Value to filter.",
        "name": "value",
        "description": "Value to filter.",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{array}",
        "types": "array",
        "typesDescription": "<code>array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "example",
        "string": "// items = [0, 1, 2]\n{{#filter items 1}}<p>{{this}}</p>{{/filter}}\n// Result: <p>0</p><p>2</p>"
      },
      {
        "type": "signature",
        "string": "{{filter input key value}} or {{#filter input key value}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/filter}}"
      },
      {
        "type": "describe",
        "string": "Performs a pluck operation, filtering all objects from the array where the provided property name does not match the provided value. (`O[n][property] != value`)"
      },
      {
        "type": "param",
        "string": "{array<mixed>} input",
        "name": "input",
        "description": "",
        "types": "array.<mixed>",
        "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} key Object property name to check against the value",
        "name": "key",
        "description": "Object property name to check against the value",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{mixed} value Value to filter.",
        "name": "value",
        "description": "Value to filter.",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{array}",
        "types": "array",
        "typesDescription": "<code>array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "example",
        "string": "// original = [{a:1}, {b:2}, {a:1,b:2}, {}]\n{{#filter original \"a\" 1}}|{{#each this}}<span>{{@key}}:{{this}}</span>{{/each}}|{{else}}no{{/filter}}\n// Result: '|<span>a:1</span>||<span>a:1</span><span>b:2</span>|'"
      }
    ],
    "description": {
      "full": "<p>Filters a passed array, depending on the arguments provided.\nMay be used inline or as an iterator. Else condition evaluates if result is empty.</p>\n",
      "summary": "Filters a passed array, depending on the arguments provided.\nMay be used inline or as an iterator. Else condition evaluates if result is empty.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 42,
    "code": "function filter (...args) {\n\n  const options = args.pop();\n  if (!args.length) throw new Error('Handlebars Helper \"filter\" needs at least one parameter');\n\n  const input = args.shift();\n  let results;\n\n  if (!args.length) results = filterUtil(input);\n  else if (args.length === 1) results = filterUtil(input, args[0]);\n  else results = filterUtil(input, args);\n\n  if (!options.fn) return results;\n\n  if (results && results.length > 0) {\n    var data = Handlebars.createFrame(options.data);\n    return results.map((result, i) => {\n      data.index = i;\n      data.first = (i === 0);\n      data.last  = (i === results.length - 1);\n      return options.fn(result, { data });\n    }).join('');\n  }\n  return options.inverse(this);\n};",
    "ctx": {
      "type": "function",
      "name": "filter",
      "string": "filter()"
    },
    "filename": "src/kit/filter.js",
    "signatures": [
      {
        "signature": "{{filter input}} or {{#filter input}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/filter}}",
        "params": [
          {
            "type": "param",
            "string": "{array<mixed>} input",
            "name": "input",
            "description": "",
            "types": "array.<mixed>",
            "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [
          "// items = [0, 1, null, 'test']\n{{#filter items}}<p>{{this}}</p>{{/filter}}\n// Result: <p>1</p><p>test</p>"
        ],
        "description": "<p>Filter all falsy items (<code>0</code>, <code>''</code>, <code>false</code>, <code>null</code>, <code>undefined</code>, etc).</p>\n",
        "returns": {
          "type": "return",
          "string": "{array}",
          "types": "array",
          "typesDescription": "<code>array</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{filter input predicate}} or {{#filter input predicate}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/filter}}",
        "params": [
          {
            "type": "param",
            "string": "{array<mixed>} input",
            "name": "input",
            "description": "",
            "types": "array.<mixed>",
            "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{mixed} value Value to filter.",
            "name": "value",
            "description": "Value to filter.",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [
          "// items = [0, 1, 2]\n{{#filter items 1}}<p>{{this}}</p>{{/filter}}\n// Result: <p>0</p><p>2</p>"
        ],
        "description": "<p>Filter all items matching the passed predicate. Else condition evaluates if result is empty. This format matches the predicate rules of the lodash filter function.</p>\n",
        "returns": {
          "type": "return",
          "string": "{array}",
          "types": "array",
          "typesDescription": "<code>array</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{filter input key value}} or {{#filter input key value}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/filter}}",
        "params": [
          {
            "type": "param",
            "string": "{array<mixed>} input",
            "name": "input",
            "description": "",
            "types": "array.<mixed>",
            "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} key Object property name to check against the value",
            "name": "key",
            "description": "Object property name to check against the value",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{mixed} value Value to filter.",
            "name": "value",
            "description": "Value to filter.",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [
          "// original = [{a:1}, {b:2}, {a:1,b:2}, {}]\n{{#filter original \"a\" 1}}|{{#each this}}<span>{{@key}}:{{this}}</span>{{/each}}|{{else}}no{{/filter}}\n// Result: '|<span>a:1</span>||<span>a:1</span><span>b:2</span>|'"
        ],
        "description": "<p>Performs a pluck operation, filtering all objects from the array where the provided property name does not match the provided value. (<code>O[n][property] != value</code>)</p>\n",
        "returns": {
          "type": "return",
          "string": "{array}",
          "types": "array",
          "typesDescription": "<code>array</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "collections"
    ],
    "name": "filter",
    "id": "functionfilter"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 67,
    "codeStart": 68,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{filter original }}',\n\t\t\tinput: { original: [ 0, 1, 2, undefined, 3, null, 4 ] },\n\t\t\toutput: '1,2,3,4',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{filter original 2 }}',\n\t\t\tinput: { original: [ 0, 1, 2, undefined, 3, null, 4 ] },\n\t\t\toutput: '0,1,,3,,4',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#filter original \"a\" 1}}|{{#each this}}{{@key}}:{{this}},{{/each}}|{{else}}no{{/filter}}',\n\t\t\tinput: { original: [ { a: 1 }, { b: 2 }, { a: 1, b: 2 }, {} ] },\n\t\t\toutput: '|a:1,||a:1,b:2,|',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#filter original \"b\"}}|{{#each this}}{{@key}}:{{this}},{{/each}}|{{else}}no{{/filter}}',\n\t\t\tinput: { original: [ { a: 1 }, { b: 2 }, { a: 1, b: 2 }, {} ] },\n\t\t\toutput: '|b:2,||a:1,b:2,|',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#filter original}}|{{#each this}}{{@index}}:{{this}},{{/each}}|{{else}}no{{/filter}}',\n\t\t\tinput: { original: [ 0, 0, 0 ] },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#filter original \"a\" 2}}|{{this}}|{{else}}no{{/filter}}',\n\t\t\tinput: { original: [ { a: 1 }, { b: 1 } ] },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections,strings"
      },
      {
        "type": "signature",
        "string": "{{first input[ count]}}"
      },
      {
        "type": "param",
        "string": "{Array|Object|String}  input Collection or String",
        "name": "input",
        "description": "Collection or String",
        "types": "Array, Object, String",
        "typesDescription": "<code>Array</code>|<code>Object</code>|<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Number} [count] Number of items to exclude",
        "name": "count",
        "description": "Number of items to exclude",
        "types": "Number",
        "typesDescription": "<code>Number</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Array} Array excluding the number of items specified",
        "types": "Array",
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Array excluding the number of items specified"
      },
      {
        "type": "signature",
        "string": "{{#first input[ count]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/first}}"
      },
      {
        "type": "param",
        "string": "{Array|Object|String} [varname] [description]",
        "name": "varname",
        "description": "[description]",
        "types": "Array, Object, String",
        "typesDescription": "<code>Array</code>|<code>Object</code>|<code>String</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "// items = ['a','b','c','d','e','f']\n{{#first items, 2}}<span>{{this}}</span>{{/first}}\n// Result: <span>a</span><span>b</span>"
      }
    ],
    "description": {
      "full": "<p>Returns the first N items in the passed array.\nMay be used inline or as an iterator. Else condition evaluates if result is empty.</p>\n",
      "summary": "Returns the first N items in the passed array.\nMay be used inline or as an iterator. Else condition evaluates if result is empty.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 22,
    "code": "function first (...args) {\n  const options = args.pop();\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"first\" needs at least one parameter');\n  }\n\n  let [ input, count ] = args;\n  count = count || 1;\n\n  // not a block function, so we just need to return the requested parts\n  if (!options.fn) {\n    if (isObject(input)) {\n      input = Object.values(input);\n    }\n    if (isArray(input) || isString(input)) return count > 1 ? input.slice(0, count) : input[0];\n    return;\n  }\n\n  // received a string\n  if (isString(input)) {\n    if (!input.length) return options.inverse(this);\n    return options.fn(input.slice(0, count));\n  }\n\n  var data = Handlebars.createFrame(options.data);\n\n  // received an object collection\n  if (isObject(input)) {\n    var keys = Object.keys(input);\n    if (!keys.length) {\n      return options.inverse(this);\n    }\n\n    return keys.slice(0, count).map((key, i) => {\n      var result = input[key];\n      data.index = i;\n      data.key = key;\n      data.first = (i === 0);\n      data.last  = (i === keys.length - 1);\n      return options.fn(result, { data });\n    }).join('');\n  }\n\n  var results = count ? input.slice(0, count) : [ input[0] ];\n  if (!results.length) {\n    return options.inverse(this);\n  }\n\n  return map(results, (result, key, i) => {\n    data.index = i;\n    data.key = key;\n    data.first = (i === 0);\n    data.last  = (i === results.length - 1);\n    return options.fn(result, { data });\n  }).join('');\n\n};",
    "ctx": {
      "type": "function",
      "name": "first",
      "string": "first()"
    },
    "filename": "src/kit/first.js",
    "signatures": [
      {
        "signature": "{{first input[ count]}}",
        "params": [
          {
            "type": "param",
            "string": "{Array|Object|String}  input Collection or String",
            "name": "input",
            "description": "Collection or String",
            "types": "Array, Object, String",
            "typesDescription": "<code>Array</code>|<code>Object</code>|<code>String</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{Number} [count] Number of items to exclude",
            "name": "count",
            "description": "Number of items to exclude",
            "types": "Number",
            "typesDescription": "<code>Number</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{Array} Array excluding the number of items specified",
          "types": "Array",
          "typesDescription": "<code>Array</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Array excluding the number of items specified"
        }
      },
      {
        "signature": "{{#first input[ count]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/first}}",
        "params": [
          {
            "type": "param",
            "string": "{Array|Object|String} [varname] [description]",
            "name": "varname",
            "description": "[description]",
            "types": "Array, Object, String",
            "typesDescription": "<code>Array</code>|<code>Object</code>|<code>String</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [
          "// items = ['a','b','c','d','e','f']\n{{#first items, 2}}<span>{{this}}</span>{{/first}}\n// Result: <span>a</span><span>b</span>"
        ]
      }
    ],
    "aliases": "",
    "category": [
      "collections",
      "strings"
    ],
    "name": "first",
    "id": "functionfirst"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 79,
    "codeStart": 80,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{first a }}',\n\t\t\tinput: { a: [ 3, 2, 1 ] },\n\t\t\toutput: '3',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{first a 2}}',\n\t\t\tinput: { a: [ 3, 2, 1 ] },\n\t\t\toutput: '3,2',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#first a 2}}|{{@key}},{{@index}},{{this}}|{{else}}no{{/first}}',\n\t\t\tinput: { a: [ 3, 2, 1 ] },\n\t\t\toutput: '|0,0,3||1,1,2|',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#first a 2}}|{{this}}|{{else}}no{{/first}}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#first a 2}}|{{@key}},{{@index}},{{this}}|{{else}}no{{/first}}',\n\t\t\tinput: { a: { a: 3, b: 2, c: 1 } },\n\t\t\toutput: '|a,0,3||b,1,2|',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "math"
      },
      {
        "type": "name",
        "string": "floor"
      },
      {
        "type": "signature",
        "string": "{{ceil value}}"
      },
      {
        "type": "param",
        "string": "{float} value",
        "name": "value",
        "description": "",
        "types": "float",
        "typesDescription": "<a href=\"float.html\">float</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{integer}",
        "types": "integer",
        "typesDescription": "<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Rounds down the passed value</p>\n",
      "summary": "Rounds down the passed value",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 14,
    "code": "function floor (value) {\n  if (arguments.length < 2) {\n    throw new Error('Handlebars Helper \"floor\" needs 1 parameter minimum');\n  }\n\n  return Math.floor(value);\n};",
    "ctx": {
      "type": "function",
      "name": "floor",
      "string": "floor()"
    },
    "filename": "src/kit/floor.js",
    "signatures": [
      {
        "signature": "{{ceil value}}",
        "params": [
          {
            "type": "param",
            "string": "{float} value",
            "name": "value",
            "description": "",
            "types": "float",
            "typesDescription": "<a href=\"float.html\">float</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{integer}",
          "types": "integer",
          "typesDescription": "<a href=\"integer.html\">integer</a>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "math"
    ],
    "name": "floor",
    "id": "functionfloor"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 21,
    "codeStart": 22,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{floor a}}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{floor a}}',\n\t\t\tinput: { a: 0 },\n\t\t\toutput: '0',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{floor a}}',\n\t\t\tinput: { a: 0.1 },\n\t\t\toutput: '0',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{floor a}}',\n\t\t\tinput: { a: 0.55 },\n\t\t\toutput: '0',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{floor a}}',\n\t\t\tinput: { a: 5.6 },\n\t\t\toutput: '5',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "dates"
      },
      {
        "type": "name",
        "string": "fromNow"
      },
      {
        "type": "signature",
        "string": "{{fromNow input [parseFormat]}}"
      },
      {
        "type": "param",
        "string": "{string|Date} input   The date value to be formatted. Must be either a Date object, parsable by Date(input), or parsable using a providing parsing string.",
        "name": "input",
        "description": "The date value to be formatted. Must be either a Date object, parsable by Date(input), or parsable using a providing parsing string.",
        "types": "string, Date",
        "typesDescription": "<code>string</code>|<code>Date</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} [parseFormat] If a `parse` argument is provided, it will be used for instructing how to parse the input. See the `date-fns` library for parsing string formats.",
        "name": "parseFormat",
        "description": "If a `parse` argument is provided, it will be used for instructing how to parse the input. See the `date-fns` library for parsing string formats.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Outputs how much time has elapsed or will elapse between now and the passed date.</p>\n",
      "summary": "Outputs how much time has elapsed or will elapse between now and the passed date.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 7,
    "codeStart": 18,
    "code": "function fromNow (...args) {\n  args.pop();\n  let input;\n\n  switch (args.length) {\n  case 0:\n    throw new Error('Handlebars Helper \"fromNow\" needs at least 1 parameter');\n  case 1:\n    input = new Date(args[0]);\n    break;\n  case 2:\n    input = parse(args[0], args[1]);\n    break;\n  default:\n    return '';\n  }\n\n  if (!isValid(input)) {\n    // console.trace('Invalid input for Handlebars Helper \"fromNow\"', { input, ...options.hash }); // eslint-disable-line\n    return '';\n  }\n\n  return formatDistanceToNow(input, { addSuffix: true });\n};",
    "ctx": {
      "type": "function",
      "name": "fromNow",
      "string": "fromNow()"
    },
    "filename": "src/kit/fromNow.js",
    "signatures": [
      {
        "signature": "{{fromNow input [parseFormat]}}",
        "params": [
          {
            "type": "param",
            "string": "{string|Date} input   The date value to be formatted. Must be either a Date object, parsable by Date(input), or parsable using a providing parsing string.",
            "name": "input",
            "description": "The date value to be formatted. Must be either a Date object, parsable by Date(input), or parsable using a providing parsing string.",
            "types": "string, Date",
            "typesDescription": "<code>string</code>|<code>Date</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} [parseFormat] If a `parse` argument is provided, it will be used for instructing how to parse the input. See the `date-fns` library for parsing string formats.",
            "name": "parseFormat",
            "description": "If a `parse` argument is provided, it will be used for instructing how to parse the input. See the `date-fns` library for parsing string formats.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "dates"
    ],
    "name": "fromNow",
    "id": "functionfromNow"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 43,
    "codeStart": 44,
    "code": "}\n\nexport function test (t) {\n\tconst past = new Date(); past.setDate(past.getDate() - 70);\n\tconst future = new Date(); future.setDate(future.getDate() + 14);\n\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{fromNow a}}',\n\t\t\tinput: { a: past },\n\t\t\toutput: '2 months ago',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{fromNow a}}',\n\t\t\tinput: { a: future },\n\t\t\toutput: 'in 14 days',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{fromNow a}}',\n\t\t\tinput: { a: 'invalid' },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{fromNow a}}',\n\t\t\tinput: { a: '' },\n\t\t\toutput: '',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "logic"
      },
      {
        "type": "signature",
        "string": "{{gt value1 value2}}"
      },
      {
        "type": "param",
        "string": "{string|integer} value1",
        "name": "value1",
        "description": "",
        "types": "string, integer",
        "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string|integer} value2",
        "name": "value2",
        "description": "",
        "types": "string, integer",
        "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean}",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#gt value test}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/gt}}"
      }
    ],
    "description": {
      "full": "<p>Tests if the first argument is greater than the second argument.\nMay be used inline or as a conditional block.</p>\n",
      "summary": "Tests if the first argument is greater than the second argument.\nMay be used inline or as a conditional block.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 17,
    "code": "function gt (a, b, options) {\n  if (arguments.length !== 3) {\n    throw new Error('Handlebars Helper \"gt\" needs 2 parameters');\n  }\n\n  if (!options.fn) return a > b || '';\n  if (a > b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n\n};",
    "ctx": {
      "type": "function",
      "name": "gt",
      "string": "gt()"
    },
    "filename": "src/kit/gt.js",
    "signatures": [
      {
        "signature": "{{gt value1 value2}}",
        "params": [
          {
            "type": "param",
            "string": "{string|integer} value1",
            "name": "value1",
            "description": "",
            "types": "string, integer",
            "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string|integer} value2",
            "name": "value2",
            "description": "",
            "types": "string, integer",
            "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{boolean}",
          "types": "boolean",
          "typesDescription": "<code>boolean</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#gt value test}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/gt}}",
        "params": [],
        "examples": []
      }
    ],
    "aliases": "",
    "category": [
      "logic"
    ],
    "name": "gt",
    "id": "functiongt"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 30,
    "codeStart": 31,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{gt a b}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{gt a b}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{gt a b}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#gt a b}}yes{{else}}no{{/gt}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#gt a b}}yes{{else}}no{{/gt}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#gt a b}}yes{{else}}no{{/gt}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "logic"
      },
      {
        "type": "signature",
        "string": "{{gte value1 value2}}"
      },
      {
        "type": "param",
        "string": "{string|integer} value1",
        "name": "value1",
        "description": "",
        "types": "string, integer",
        "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string|integer} value2",
        "name": "value2",
        "description": "",
        "types": "string, integer",
        "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean}",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#gte value test}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/gte}}"
      }
    ],
    "description": {
      "full": "<p>Tests if the first argument is greater than or equal to the second argument.\nMay be used inline or as a conditional block.</p>\n",
      "summary": "Tests if the first argument is greater than or equal to the second argument.\nMay be used inline or as a conditional block.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 17,
    "code": "function gte (a, b, options) {\n  if (arguments.length !== 3) {\n    throw new Error('Handlebars Helper \"gte\" needs 2 parameters');\n  }\n\n  if (!options.fn) return a >= b || '';\n  if (a >= b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n\n};",
    "ctx": {
      "type": "function",
      "name": "gte",
      "string": "gte()"
    },
    "filename": "src/kit/gte.js",
    "signatures": [
      {
        "signature": "{{gte value1 value2}}",
        "params": [
          {
            "type": "param",
            "string": "{string|integer} value1",
            "name": "value1",
            "description": "",
            "types": "string, integer",
            "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string|integer} value2",
            "name": "value2",
            "description": "",
            "types": "string, integer",
            "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{boolean}",
          "types": "boolean",
          "typesDescription": "<code>boolean</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#gte value test}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/gte}}",
        "params": [],
        "examples": []
      }
    ],
    "aliases": "",
    "category": [
      "logic"
    ],
    "name": "gte",
    "id": "functiongte"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 30,
    "codeStart": 31,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{gte a b}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{gte a b}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{gte a b}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#gte a b}}yes{{else}}no{{/gte}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#gte a b}}yes{{else}}no{{/gte}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#gte a b}}yes{{else}}no{{/gte}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: 'yes',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings, collections"
      },
      {
        "type": "name",
        "string": "includes"
      },
      {
        "type": "signature",
        "string": "{{includes haystack needle [regex=true]}}"
      },
      {
        "type": "param",
        "string": "{string|Array<mixed>|object} haystack String or array to search inside, or object to check for key",
        "name": "haystack",
        "description": "String or array to search inside, or object to check for key",
        "types": "string, Array.<mixed>, object",
        "typesDescription": "<code>string</code>|<code>Array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string|RegExp|mixed} needle String to search for. If haystack is a string\nand `regex=true` or needle is a RegExp, then the needle is evaluated as a regular expression.\nIf haystack is an object, needle is used as a key name.",
        "name": "needle",
        "description": "String to search for. If haystack is a string and `regex=true` or needle is a RegExp, then the needle is evaluated as a regular expression.\nIf haystack is an object, needle is used as a key name.",
        "types": "string, RegExp, mixed",
        "typesDescription": "<code>string</code>|<code>RegExp</code>|<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "describe",
        "string": "Returns true if the haystack contains the needle"
      },
      {
        "type": "return",
        "string": "{boolean}",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#includes haystack needle [regex=true]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/includes}}"
      },
      {
        "type": "param",
        "string": "{string} haystack String to search inside",
        "name": "haystack",
        "description": "String to search inside",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} needle String to search for. If `regex=true` then the string is evaluated as a regular expression.",
        "name": "needle",
        "description": "String to search for. If `regex=true` then the string is evaluated as a regular expression.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "describe",
        "string": "If the string does contain that value, block will evaluate with the result value as the current context ({this})."
      }
    ],
    "description": {
      "full": "<p>Tests if the needle value exists inside the haystack</p>\n",
      "summary": "Tests if the needle value exists inside the haystack",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 24,
    "code": "function contains (...args) {\n  if (args.length !== 3) {\n    throw new Error('Handlebars Helper \"contains\" needs 2 parameters');\n  }\n\n  const options = args.pop();\n  const [ haystack, needle ] = args;\n  let result;\n\n  if (isArray(haystack)) {\n    result = haystack.includes(needle);\n  } else if (isString(haystack)) {\n    if ((options.hash && options.hash.regex) || needle instanceof RegExp) {\n      result = !!haystack.match(new RegExp(needle));\n    } else {\n      result = haystack.includes(needle);\n    }\n  } else if (isObject(haystack)) {\n    result = hasOwn(haystack, needle);\n  } else {\n    result = false;\n  }\n\n  if (!options.fn) {\n    return result || '';\n  }\n\n  return result ? options.fn(this) : options.inverse(this);\n\n};",
    "ctx": {
      "type": "function",
      "name": "includes",
      "string": "contains()"
    },
    "filename": "src/kit/includes.js",
    "signatures": [
      {
        "signature": "{{includes haystack needle [regex=true]}}",
        "params": [
          {
            "type": "param",
            "string": "{string|Array<mixed>|object} haystack String or array to search inside, or object to check for key",
            "name": "haystack",
            "description": "String or array to search inside, or object to check for key",
            "types": "string, Array.<mixed>, object",
            "typesDescription": "<code>string</code>|<code>Array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>object</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string|RegExp|mixed} needle String to search for. If haystack is a string\nand `regex=true` or needle is a RegExp, then the needle is evaluated as a regular expression.\nIf haystack is an object, needle is used as a key name.",
            "name": "needle",
            "description": "String to search for. If haystack is a string and `regex=true` or needle is a RegExp, then the needle is evaluated as a regular expression.\nIf haystack is an object, needle is used as a key name.",
            "types": "string, RegExp, mixed",
            "typesDescription": "<code>string</code>|<code>RegExp</code>|<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>Returns true if the haystack contains the needle</p>\n",
        "returns": {
          "type": "return",
          "string": "{boolean}",
          "types": "boolean",
          "typesDescription": "<code>boolean</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#includes haystack needle [regex=true]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/includes}}",
        "params": [
          {
            "type": "param",
            "string": "{string} haystack String to search inside",
            "name": "haystack",
            "description": "String to search inside",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} needle String to search for. If `regex=true` then the string is evaluated as a regular expression.",
            "name": "needle",
            "description": "String to search for. If `regex=true` then the string is evaluated as a regular expression.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>If the string does contain that value, block will evaluate with the result value as the current context ({this}).</p>\n"
      }
    ],
    "aliases": "",
    "category": [
      "strings",
      "collections"
    ],
    "name": "includes",
    "id": "functionincludes"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 54,
    "codeStart": 55,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{includes a b}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 2 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{includes a b}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 0 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#includes a b}}yes{{else}}no{{/includes}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 1 },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#includes a b}}yes{{else}}no{{/includes}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 4 },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{includes a b}}',\n\t\t\tinput: { a: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et.', b: 'is' },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{includes a b}}',\n\t\t\tinput: { a: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et.', b: 'ex' },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#includes a b}}yes{{else}}no{{/includes}}',\n\t\t\tinput: { a: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et.', b: 'is' },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#includes a b}}yes{{else}}no{{/includes}}',\n\t\t\tinput: { a: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et.', b: 'ex' },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "context"
      },
      {
        "type": "name",
        "string": "inject"
      },
      {
        "type": "signature",
        "string": "{{inject key=value [key2=value2] ...}}"
      },
      {
        "type": "describe",
        "string": "Inserts into the current context."
      },
      {
        "type": "signature",
        "string": "{{#inject key=value [key2=value2] ...}}<TEMPLATE>{{/inject}}"
      },
      {
        "type": "describe",
        "string": "Inserts into the context of the tag block."
      }
    ],
    "description": {
      "full": "<p>Any values passed as named arguments are injected into the handlebars data context, using the name provided for each argument.</p>\n",
      "summary": "Any values passed as named arguments are injected into the handlebars data context, using the name provided for each argument.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 16,
    "code": "function inject (...args) {\n  var context = this; // eslint-disable-line\n\n  const options = args.pop();\n\n  if (options.fn) {\n    context = Object.create(this || null);\n  }\n\n  Object.assign(context, ...args);\n\n  if (options.hash) {\n    Object.keys(options.hash).forEach((key) => {\n\n      var value = options.hash[key];\n      if (String(value)[0] === '{') {\n        value = JSON.parse(value);\n      }\n\n      context[key] = value;\n    });\n  }\n\n  return options.fn && options.fn(context) || '';\n};",
    "ctx": {
      "type": "function",
      "name": "inject",
      "string": "inject()"
    },
    "filename": "src/kit/inject.js",
    "signatures": [
      {
        "signature": "{{inject key=value [key2=value2] ...}}",
        "params": [],
        "examples": [],
        "description": "<p>Inserts into the current context.</p>\n"
      },
      {
        "signature": "{{#inject key=value [key2=value2] ...}}<TEMPLATE>{{/inject}}",
        "params": [],
        "examples": [],
        "description": "<p>Inserts into the context of the tag block.</p>\n"
      }
    ],
    "aliases": "",
    "category": [
      "context"
    ],
    "name": "inject",
    "id": "functioninject"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 42,
    "codeStart": 43,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: 'a={{a}},[{{#inject c=2}}a={{a}},c={{c}}{{/inject}}],c={{c}}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: 'a=1,[a=1,c=2],c=',\n\t\t},\n\t\t{\n\t\t\ttemplate: 'a={{a}},[{{#inject c=\\'{\"d\":\"foo\"}\\'}}a={{a}},c.d={{c.d}}{{/inject}}],c={{c}}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: 'a=1,[a=1,c.d=foo],c=',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "logic"
      },
      {
        "type": "signature",
        "string": "{{is value test1 ... testN}}"
      },
      {
        "type": "param",
        "string": "{mixed} value Value to check against",
        "name": "value",
        "description": "Value to check against",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{mixed} ...test Values to test",
        "name": "...test",
        "description": "Values to test",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{mixed} Matched value",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Matched value"
      },
      {
        "type": "signature",
        "string": "{{#is value test1 ... testN}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/is}}"
      },
      {
        "type": "describe",
        "string": "Truthy block will evaluate with the result value as the current context ({this})."
      }
    ],
    "description": {
      "full": "<p>Tests if the first argument matches any of the other arguments with strict equality.</p>\n",
      "summary": "Tests if the first argument matches any of the other arguments with strict equality.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 17,
    "code": "function is (...args) {\n  if (arguments.length < 3) {\n    throw new Error('Handlebars Helper \"is\" needs a minimum of 2 arguments');\n  }\n\n  const options = args.pop();\n  const value = args.shift();\n\n  var result = args.includes(value);\n\n  if (!options.fn) return result || '';\n\n  return result ? options.fn(result) : options.inverse(this);\n};",
    "ctx": {
      "type": "function",
      "name": "is",
      "string": "is()"
    },
    "filename": "src/kit/is.js",
    "signatures": [
      {
        "signature": "{{is value test1 ... testN}}",
        "params": [
          {
            "type": "param",
            "string": "{mixed} value Value to check against",
            "name": "value",
            "description": "Value to check against",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{mixed} ...test Values to test",
            "name": "...test",
            "description": "Values to test",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{mixed} Matched value",
          "types": "mixed",
          "typesDescription": "<a href=\"mixed.html\">mixed</a>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Matched value"
        }
      },
      {
        "signature": "{{#is value test1 ... testN}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/is}}",
        "params": [],
        "examples": [],
        "description": "<p>Truthy block will evaluate with the result value as the current context ({this}).</p>\n"
      }
    ],
    "aliases": "",
    "category": [
      "logic"
    ],
    "name": "is",
    "id": "functionis"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 32,
    "codeStart": 33,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{is a b}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{is a b}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{is a b}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{is a b}}',\n\t\t\tinput: { a: '2', b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#is a b}}yes{{else}}no{{/is}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#is a b}}yes{{else}}no{{/is}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#is a b}}yes{{else}}no{{/is}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#is a b}}yes{{else}}no{{/is}}',\n\t\t\tinput: { a: 2, b: '2' },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#is 1 2 3}}yes{{else}}no{{/is}}',\n\t\t\tinput: {},\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#is 2 2 3}}yes{{else}}no{{/is}}',\n\t\t\tinput: {},\n\t\t\toutput: 'yes',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "logic"
      },
      {
        "type": "signature",
        "string": "{{isLike value test1 ... testN}}"
      },
      {
        "type": "param",
        "string": "{mixed} value Value to check against",
        "name": "value",
        "description": "Value to check against",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{mixed} ...test Values to test",
        "name": "...test",
        "description": "Values to test",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{mixed} Matched value",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Matched value"
      },
      {
        "type": "signature",
        "string": "{{#isLike value test1 ... testN}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/isLike}}"
      },
      {
        "type": "describe",
        "string": "Truthy block will evaluate with the result value as the current context ({this})."
      }
    ],
    "description": {
      "full": "<p>Tests if the first argument matches any of the other arguments with loose equality.</p>\n",
      "summary": "Tests if the first argument matches any of the other arguments with loose equality.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 17,
    "code": "function isLike (...args) {\n  if (arguments.length < 3) {\n    throw new Error('Handlebars Helper \"isLike\" needs a minimum of 2 arguments');\n  }\n\n  const options = args.pop();\n  const value = args.shift();\n\n  var result = false;\n  var i = args.length;\n  while (i-- && !result) {\n    result = result || (value == args[i]); // eslint-disable-line eqeqeq\n  }\n\n  if (!options.fn) return result || '';\n\n  return result ? options.fn(this) : options.inverse(this);\n};",
    "ctx": {
      "type": "function",
      "name": "isLike",
      "string": "isLike()"
    },
    "filename": "src/kit/isLike.js",
    "signatures": [
      {
        "signature": "{{isLike value test1 ... testN}}",
        "params": [
          {
            "type": "param",
            "string": "{mixed} value Value to check against",
            "name": "value",
            "description": "Value to check against",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{mixed} ...test Values to test",
            "name": "...test",
            "description": "Values to test",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{mixed} Matched value",
          "types": "mixed",
          "typesDescription": "<a href=\"mixed.html\">mixed</a>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Matched value"
        }
      },
      {
        "signature": "{{#isLike value test1 ... testN}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/isLike}}",
        "params": [],
        "examples": [],
        "description": "<p>Truthy block will evaluate with the result value as the current context ({this}).</p>\n"
      }
    ],
    "aliases": "",
    "category": [
      "logic"
    ],
    "name": "isLike",
    "id": "functionisLike"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 36,
    "codeStart": 37,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{isLike a b}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{isLike a b}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{isLike a b}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{isLike a b}}',\n\t\t\tinput: { a: '2', b: 2 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{isLike a b}}',\n\t\t\tinput: { a: '2', b: '1' },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isLike a b}}yes{{else}}no{{/isLike}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isLike a b}}yes{{else}}no{{/isLike}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isLike a b}}yes{{else}}no{{/isLike}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isLike a b}}yes{{else}}no{{/isLike}}',\n\t\t\tinput: { a: 2, b: '2' },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isLike a b}}yes{{else}}no{{/isLike}}',\n\t\t\tinput: { a: '2', b: '1' },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isLike 2 2 \"2\" 1}}yes{{else}}no{{/isLike}}',\n\t\t\tinput: {},\n\t\t\toutput: 'yes',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "logic"
      },
      {
        "type": "signature",
        "string": "{{isNot value test1 ... testN}}"
      },
      {
        "type": "param",
        "string": "{mixed} value Value to check against",
        "name": "value",
        "description": "Value to check against",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{mixed} ...test Values to test",
        "name": "...test",
        "description": "Values to test",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{mixed} Matched value",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Matched value"
      },
      {
        "type": "signature",
        "string": "{{#isNot value test1 ... testN}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/isNot}}"
      }
    ],
    "description": {
      "full": "<p>Tests that the first argument does not match any of the other arguments with strict equality.</p>\n",
      "summary": "Tests that the first argument does not match any of the other arguments with strict equality.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 16,
    "code": "function isNot (...args) {\n  if (arguments.length < 3) {\n    throw new Error('Handlebars Helper \"isNot\" needs a minimum of 2 arguments');\n  }\n\n  const options = args.pop();\n  const value = args.shift();\n\n  var result = args.indexOf(value) === -1;\n\n  if (!options.fn) return result || '';\n\n  return result ? options.fn(this) : options.inverse(this);\n};",
    "ctx": {
      "type": "function",
      "name": "isNot",
      "string": "isNot()"
    },
    "filename": "src/kit/isNot.js",
    "signatures": [
      {
        "signature": "{{isNot value test1 ... testN}}",
        "params": [
          {
            "type": "param",
            "string": "{mixed} value Value to check against",
            "name": "value",
            "description": "Value to check against",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{mixed} ...test Values to test",
            "name": "...test",
            "description": "Values to test",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{mixed} Matched value",
          "types": "mixed",
          "typesDescription": "<a href=\"mixed.html\">mixed</a>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Matched value"
        }
      },
      {
        "signature": "{{#isNot value test1 ... testN}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/isNot}}",
        "params": [],
        "examples": []
      }
    ],
    "aliases": "",
    "category": [
      "logic"
    ],
    "name": "isNot",
    "id": "functionisNot"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 31,
    "codeStart": 32,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{isNot a b}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{isNot a b}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{isNot a b}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{isNot a b}}',\n\t\t\tinput: { a: '2', b: 2 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isNot a b}}yes{{else}}no{{/isNot}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isNot a b}}yes{{else}}no{{/isNot}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isNot a b}}yes{{else}}no{{/isNot}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isNot a b}}yes{{else}}no{{/isNot}}',\n\t\t\tinput: { a: 2, b: '2' },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isNot 2 2 \"2\" 1}}yes{{else}}no{{/isNot}}',\n\t\t\tinput: {},\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isNot 2 \"1\" \"2\"}}yes{{else}}no{{/isNot}}',\n\t\t\tinput: {},\n\t\t\toutput: 'yes',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "logic"
      },
      {
        "type": "signature",
        "string": "{{isNotLike value test1 ... testN}}"
      },
      {
        "type": "param",
        "string": "{mixed} value Value to check against",
        "name": "value",
        "description": "Value to check against",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{mixed} ...test Values to test",
        "name": "...test",
        "description": "Values to test",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{mixed} Matched value",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Matched value"
      },
      {
        "type": "signature",
        "string": "{{#isNotLike value test1 ... testN}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/isNotLike}}"
      }
    ],
    "description": {
      "full": "<p>Tests that the first argument does not match any of the other arguments with loose equality.</p>\n",
      "summary": "Tests that the first argument does not match any of the other arguments with loose equality.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 16,
    "code": "function isNotLike (...args) {\n  if (arguments.length < 3) {\n    throw new Error('Handlebars Helper \"isNotLike\" needs a minimum of 2 arguments');\n  }\n\n  const options = args.pop();\n  const value = args.shift();\n\n  var result = true;\n  var i = args.length;\n  while (i-- && result) {\n    result = result && (value != args[i]); // eslint-disable-line eqeqeq\n  }\n\n  if (!options.fn) return result || '';\n\n  return result ? options.fn(this, options) : options.inverse(this, options);\n};",
    "ctx": {
      "type": "function",
      "name": "isNotLike",
      "string": "isNotLike()"
    },
    "filename": "src/kit/isNotLike.js",
    "signatures": [
      {
        "signature": "{{isNotLike value test1 ... testN}}",
        "params": [
          {
            "type": "param",
            "string": "{mixed} value Value to check against",
            "name": "value",
            "description": "Value to check against",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{mixed} ...test Values to test",
            "name": "...test",
            "description": "Values to test",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{mixed} Matched value",
          "types": "mixed",
          "typesDescription": "<a href=\"mixed.html\">mixed</a>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Matched value"
        }
      },
      {
        "signature": "{{#isNotLike value test1 ... testN}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/isNotLike}}",
        "params": [],
        "examples": []
      }
    ],
    "aliases": "",
    "category": [
      "logic"
    ],
    "name": "isNotLike",
    "id": "functionisNotLike"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 35,
    "codeStart": 36,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{isNotLike a b}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{isNotLike a b}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{isNotLike a b}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{isNotLike a b}}',\n\t\t\tinput: { a: '2', b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{isNotLike a b}}',\n\t\t\tinput: { a: '2', b: '1' },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isNotLike a b}}yes{{else}}no{{/isNotLike}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isNotLike a b}}yes{{else}}no{{/isNotLike}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isNotLike a b}}yes{{else}}no{{/isNotLike}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isNotLike a b}}yes{{else}}no{{/isNotLike}}',\n\t\t\tinput: { a: 2, b: '2' },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isNotLike a b}}yes{{else}}no{{/isNotLike}}',\n\t\t\tinput: { a: '2', b: '1' },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#isNotLike 2 \"1\" \"2\"}}yes{{else}}no{{/isNotLike}}',\n\t\t\tinput: {},\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections"
      },
      {
        "type": "signature",
        "string": "{{join items[ separator]}}"
      },
      {
        "type": "param",
        "string": "{array<mixed>} input",
        "name": "input",
        "description": "",
        "types": "array.<mixed>",
        "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} [separator] Defaults to `','`",
        "name": "separator",
        "description": "Defaults to `','`",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#join items[ separator]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/join}}"
      }
    ],
    "description": {
      "full": "<p>Joins all elements of a collection into a string using a separator if specified.\nIf used as an iterator block, the block contents will be used as a replacement for the item in the array, and then output after joined.\nElse condition evaluates if result is empty.</p>\n",
      "summary": "Joins all elements of a collection into a string using a separator if specified.\nIf used as an iterator block, the block contents will be used as a replacement for the item in the array, and then output after joined.\nElse condition evaluates if result is empty.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 18,
    "code": "function join (...args) {\n  if (arguments.length === 1) {\n    throw new Error('Handlebars Helper \"join\" needs at least one parameter');\n  }\n\n  const options = args.pop();\n  const input = args[0];\n  const delimiter = isUndefined(args[1]) ? ', ' : args[1];\n\n  if (!sizeOf(input)) {\n    return options.inverse ? options.inverse(this) : '';\n  }\n\n  if (options.fn) {\n    var data = Handlebars.createFrame(options.data);\n    return map(input, (result, key, i) => {\n      data.index = i;\n      data.key = key;\n      data.first = (i === 0);\n      data.last  = (i === input.length - 1);\n      return options.fn(result, { data });\n    }).join(delimiter);\n  }\n\n  return input.join(delimiter);\n};",
    "ctx": {
      "type": "function",
      "name": "join",
      "string": "join()"
    },
    "filename": "src/kit/join.js",
    "signatures": [
      {
        "signature": "{{join items[ separator]}}",
        "params": [
          {
            "type": "param",
            "string": "{array<mixed>} input",
            "name": "input",
            "description": "",
            "types": "array.<mixed>",
            "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} [separator] Defaults to `','`",
            "name": "separator",
            "description": "Defaults to `','`",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#join items[ separator]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/join}}",
        "params": [],
        "examples": []
      }
    ],
    "aliases": "",
    "category": [
      "collections"
    ],
    "name": "join",
    "id": "functionjoin"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 44,
    "codeStart": 45,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{join a}}',\n\t\t\tinput: { a: [ 1, 2, 3 ] },\n\t\t\toutput: '1, 2, 3',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{join a \"-\"}}',\n\t\t\tinput: { a: [ 1, 2, 3 ] },\n\t\t\toutput: '1-2-3',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{join a \"\"}}',\n\t\t\tinput: { a: [ 1, 2, 3 ] },\n\t\t\toutput: '123',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#join a \"|\"}}<{{this}}>{{else}}no{{/join}}',\n\t\t\tinput: { a: [ 1, 2, 3 ] },\n\t\t\toutput: '<1>|<2>|<3>',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#join a \"|\"}}<{{this}}>{{else}}no{{/join}}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections"
      },
      {
        "type": "signature",
        "string": "{{keys input}}"
      },
      {
        "type": "param",
        "string": "{array<mixed>|object} input",
        "name": "input",
        "description": "",
        "types": "array.<mixed>, object",
        "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{array<integer|string>}",
        "types": "array.<integer|string>",
        "typesDescription": "<code>array</code>.&lt;<a href=\"integer.html\">integer</a>|<code>string</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#keys}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/keys}}"
      }
    ],
    "description": {
      "full": "<p>Returns the indexes of an array or the keys of an object.\nMay be used inline or as an iterator. Else condition evaluates if result is empty.</p>\n",
      "summary": "Returns the indexes of an array or the keys of an object.\nMay be used inline or as an iterator. Else condition evaluates if result is empty.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 16,
    "code": "function keys (...args) {\n\n  const options = args.pop();\n  const [ input ] = args;\n\n  if (!options.fn) {\n    return keysUtil(input);\n  }\n\n  if (sizeOf(input)) {\n    var data = Handlebars.createFrame(options.data);\n    return map(input, (v, k, i) => {\n      data.index = i;\n      data.key = k;\n      data.first = (i === 0);\n      data.last  = (i === input.length - 1);\n      return options.fn(k, { data });\n    }).join('');\n  }\n  return options.inverse(this);\n};",
    "ctx": {
      "type": "function",
      "name": "keys",
      "string": "keys()"
    },
    "filename": "src/kit/keys.js",
    "signatures": [
      {
        "signature": "{{keys input}}",
        "params": [
          {
            "type": "param",
            "string": "{array<mixed>|object} input",
            "name": "input",
            "description": "",
            "types": "array.<mixed>, object",
            "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>object</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{array<integer|string>}",
          "types": "array.<integer|string>",
          "typesDescription": "<code>array</code>.&lt;<a href=\"integer.html\">integer</a>|<code>string</code>&gt;",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#keys}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/keys}}",
        "params": [],
        "examples": []
      }
    ],
    "aliases": "",
    "category": [
      "collections"
    ],
    "name": "keys",
    "id": "functionkeys"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 37,
    "codeStart": 38,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{keys a}}',\n\t\t\tinput: { a: [ 'a', 'b', 'c' ] },\n\t\t\toutput: '0,1,2',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{keys a}}',\n\t\t\tinput: { a: { a: 1, b: 2, c: 3 } },\n\t\t\toutput: 'a,b,c',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{keys a}}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#keys a}}<{{this}}>{{else}}no{{/keys}}',\n\t\t\tinput: { a: [ 'a', 'b', 'c' ] },\n\t\t\toutput: '<0><1><2>',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#keys a}}<{{this}}>{{else}}no{{/keys}}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections,strings"
      },
      {
        "type": "signature",
        "string": "{{last input[ count]}}"
      },
      {
        "type": "param",
        "string": "{Array|Object|String}  input Collection or String",
        "name": "input",
        "description": "Collection or String",
        "types": "Array, Object, String",
        "typesDescription": "<code>Array</code>|<code>Object</code>|<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Number} [count] Number of items to exclude",
        "name": "count",
        "description": "Number of items to exclude",
        "types": "Number",
        "typesDescription": "<code>Number</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Array} Array excluding the number of items specified",
        "types": "Array",
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Array excluding the number of items specified"
      },
      {
        "type": "signature",
        "string": "{{#last input[ count]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/last}}"
      },
      {
        "type": "example",
        "string": "// items = ['a','b','c','d','e','f']\n{{#last items, 2}}<span>{{this}}</span>{{/last}}\n// Result: <span>a</span><span>b</span>"
      }
    ],
    "description": {
      "full": "<p>Returns the last N items in the passed array.\nMay be used inline or as an iterator. Else condition evaluates if result is empty.</p>\n",
      "summary": "Returns the last N items in the passed array.\nMay be used inline or as an iterator. Else condition evaluates if result is empty.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 21,
    "code": "function last (...args) {\n  const options = args.pop();\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"first\" needs at least one parameter');\n  }\n\n  let [ input, count ] = args;\n  count = count || 1;\n\n  // not a block function, so we just need to return the requested parts\n  if (!options.fn) {\n    if (isObject(input)) {\n      input = Object.values(input);\n    }\n    if (isArray(input) || isString(input)) return count > 1 ? input.slice(-count) : input[input.length - 1];\n    return;\n  }\n\n  // received a string\n  if (isString(input)) {\n    if (!input.length) return options.inverse(this);\n    return options.fn(input.slice(-count));\n  }\n\n  var data = Handlebars.createFrame(options.data);\n\n  // received an object collection\n  if (input && typeof input === 'object' && !Array.isArray(input)) {\n    var keys = Object.keys(input);\n    if (!keys.length) {\n      return options.inverse(this);\n    }\n\n    return keys.slice(-count).map((key, i) => {\n      var result = input[key];\n      data.index = i;\n      data.key = key;\n      data.first = (i === 0);\n      data.last  = (i === keys.length - 1);\n      return options.fn(result, { data });\n    }).join('');\n  }\n\n  var results = count ? input.slice(-count) : [ input[0] ];\n  if (!results.length) {\n    return options.inverse(this);\n  }\n\n  return map(results, (result, key, i) => {\n    data.index = i;\n    data.key = key;\n    data.first = (i === 0);\n    data.last  = (i === results.length - 1);\n    return options.fn(result, { data });\n  }).join('');\n\n};",
    "ctx": {
      "type": "function",
      "name": "last",
      "string": "last()"
    },
    "filename": "src/kit/last.js",
    "signatures": [
      {
        "signature": "{{last input[ count]}}",
        "params": [
          {
            "type": "param",
            "string": "{Array|Object|String}  input Collection or String",
            "name": "input",
            "description": "Collection or String",
            "types": "Array, Object, String",
            "typesDescription": "<code>Array</code>|<code>Object</code>|<code>String</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{Number} [count] Number of items to exclude",
            "name": "count",
            "description": "Number of items to exclude",
            "types": "Number",
            "typesDescription": "<code>Number</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{Array} Array excluding the number of items specified",
          "types": "Array",
          "typesDescription": "<code>Array</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Array excluding the number of items specified"
        }
      },
      {
        "signature": "{{#last input[ count]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/last}}",
        "params": [],
        "examples": [
          "// items = ['a','b','c','d','e','f']\n{{#last items, 2}}<span>{{this}}</span>{{/last}}\n// Result: <span>a</span><span>b</span>"
        ]
      }
    ],
    "aliases": "",
    "category": [
      "collections",
      "strings"
    ],
    "name": "last",
    "id": "functionlast"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 78,
    "codeStart": 79,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{last a }}',\n\t\t\tinput: { a: [ 1, 2, 3 ] },\n\t\t\toutput: '3',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{last a 2}}',\n\t\t\tinput: { a: [ 3, 2, 1 ] },\n\t\t\toutput: '2,1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#last a 2}}|{{this}}|{{else}}no{{/last}}',\n\t\t\tinput: { a: [ 3, 2, 1 ] },\n\t\t\toutput: '|2||1|',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#last a 2}}|{{this}}|{{else}}no{{/last}}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections"
      },
      {
        "type": "signature",
        "string": "{{length input}}"
      },
      {
        "type": "describe",
        "string": "Returns the length of the input"
      },
      {
        "type": "param",
        "string": "{array|object|string} input",
        "name": "input",
        "description": "",
        "types": "array, object, string",
        "typesDescription": "<code>array</code>|<code>object</code>|<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{integer}",
        "types": "integer",
        "typesDescription": "<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{length input target}}"
      },
      {
        "type": "descibe",
        "string": "Returns a boolean if the length matches the passed target."
      },
      {
        "type": "param",
        "string": "{array|object|string} input",
        "name": "input",
        "description": "",
        "types": "array, object, string",
        "typesDescription": "<code>array</code>|<code>object</code>|<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{integer} target The target length to check against",
        "name": "target",
        "description": "The target length to check against",
        "types": "integer",
        "typesDescription": "<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean}",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#length input}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/length}}"
      },
      {
        "type": "describe",
        "string": "Evaluates block content if the length is greater than 0, else if it is not."
      },
      {
        "type": "param",
        "string": "{array|object|string} input",
        "name": "input",
        "description": "",
        "types": "array, object, string",
        "typesDescription": "<code>array</code>|<code>object</code>|<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "signature",
        "string": "{{#length input target}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/length}}"
      },
      {
        "type": "describe",
        "string": "Evaluates block content if the length matches the target, else block if it does not"
      },
      {
        "type": "param",
        "string": "{array|object|string} input",
        "name": "input",
        "description": "",
        "types": "array, object, string",
        "typesDescription": "<code>array</code>|<code>object</code>|<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{interger} target The target length it should match in order to evaluate.",
        "name": "target",
        "description": "The target length it should match in order to evaluate.",
        "types": "interger",
        "typesDescription": "<a href=\"interger.html\">interger</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Returns the number of keys on an object, or the length of an array or string.\nMay be used inline or as an iterator. Else condition evaluates if result is 0.</p>\n",
      "summary": "Returns the number of keys on an object, or the length of an array or string.\nMay be used inline or as an iterator. Else condition evaluates if result is 0.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 31,
    "code": "function length (...args) {\n  if (arguments.length === 1) {\n    throw new Error('Handlebars Helper \"length\" needs 1 parameter');\n  }\n\n  const options = args.pop();\n  const input = args[0];\n  const target = args.length > 1 ? args[1] : false;\n\n  var results = sizeOf(input);\n\n  if (!options.fn) return target === false ? results : results === target && target || 0;\n\n  if (target === false ? results : results === target) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n\n};",
    "ctx": {
      "type": "function",
      "name": "length",
      "string": "length()"
    },
    "filename": "src/kit/length.js",
    "signatures": [
      {
        "signature": "{{length input}}",
        "params": [
          {
            "type": "param",
            "string": "{array|object|string} input",
            "name": "input",
            "description": "",
            "types": "array, object, string",
            "typesDescription": "<code>array</code>|<code>object</code>|<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>Returns the length of the input</p>\n",
        "returns": {
          "type": "return",
          "string": "{integer}",
          "types": "integer",
          "typesDescription": "<a href=\"integer.html\">integer</a>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{length input target}}",
        "params": [
          {
            "type": "param",
            "string": "{array|object|string} input",
            "name": "input",
            "description": "",
            "types": "array, object, string",
            "typesDescription": "<code>array</code>|<code>object</code>|<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{integer} target The target length to check against",
            "name": "target",
            "description": "The target length to check against",
            "types": "integer",
            "typesDescription": "<a href=\"integer.html\">integer</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{boolean}",
          "types": "boolean",
          "typesDescription": "<code>boolean</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#length input}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/length}}",
        "params": [
          {
            "type": "param",
            "string": "{array|object|string} input",
            "name": "input",
            "description": "",
            "types": "array, object, string",
            "typesDescription": "<code>array</code>|<code>object</code>|<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>Evaluates block content if the length is greater than 0, else if it is not.</p>\n"
      },
      {
        "signature": "{{#length input target}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/length}}",
        "params": [
          {
            "type": "param",
            "string": "{array|object|string} input",
            "name": "input",
            "description": "",
            "types": "array, object, string",
            "typesDescription": "<code>array</code>|<code>object</code>|<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{interger} target The target length it should match in order to evaluate.",
            "name": "target",
            "description": "The target length it should match in order to evaluate.",
            "types": "interger",
            "typesDescription": "<a href=\"interger.html\">interger</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>Evaluates block content if the length matches the target, else block if it does not</p>\n"
      }
    ],
    "aliases": "",
    "category": [
      "collections"
    ],
    "name": "length",
    "id": "functionlength"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 50,
    "codeStart": 51,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{length a }}',\n\t\t\tinput: { a: [ 1, 2, 3 ] },\n\t\t\toutput: '3',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{length a }}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: '0',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#length a}}yes{{else}}no{{/length}}',\n\t\t\tinput: { a: [ 3, 2, 1 ] },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#length a}}yes{{else}}no{{/length}}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: 'no',\n\t\t},\n\n\t\t{\n\t\t\ttemplate: '{{length a 3}}',\n\t\t\tinput: { a: [ 1, 2, 3 ] },\n\t\t\toutput: '3',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{length a 3}}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: '0',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#length a 3}}yes{{else}}no{{/length}}',\n\t\t\tinput: { a: [ 3, 2, 1 ] },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#length a 3}}yes{{else}}no{{/length}}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "log"
      },
      {
        "type": "category",
        "string": "debug"
      },
      {
        "type": "signature",
        "string": "{{log}}"
      },
      {
        "type": "return",
        "string": "{null} Sends the current context to console.log",
        "types": "",
        "typesDescription": "<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false,
        "description": "Sends the current context to console.log"
      },
      {
        "type": "signature",
        "string": "{{log argument1 ... argumentN}}"
      },
      {
        "type": "param",
        "string": "{...mixed} args Arguments to send to console.log",
        "name": "args",
        "description": "Arguments to send to console.log",
        "types": "mixed",
        "typesDescription": "...<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": true
      },
      {
        "type": "return",
        "string": "{null}",
        "types": "",
        "typesDescription": "<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Sends the passed arguments to console.log</p>\n",
      "summary": "Sends the passed arguments to console.log",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 16,
    "code": "function log (...args) {\n  if (args.length === 1) {\n    console.log(this); // eslint-disable-line no-console\n  } else {\n    console.log(...args.slice(0, -1)); // eslint-disable-line no-console\n  }\n};",
    "ctx": {
      "type": "function",
      "name": "log",
      "string": "log()"
    },
    "filename": "src/kit/log.js",
    "signatures": [
      {
        "signature": "{{log}}",
        "params": [],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{null} Sends the current context to console.log",
          "types": "",
          "typesDescription": "<code>null</code>",
          "optional": false,
          "nullable": true,
          "nonNullable": false,
          "variable": false,
          "description": "Sends the current context to console.log"
        }
      },
      {
        "signature": "{{log argument1 ... argumentN}}",
        "params": [
          {
            "type": "param",
            "string": "{...mixed} args Arguments to send to console.log",
            "name": "args",
            "description": "Arguments to send to console.log",
            "types": "mixed",
            "typesDescription": "...<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": true
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{null}",
          "types": "",
          "typesDescription": "<code>null</code>",
          "optional": false,
          "nullable": true,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "debug"
    ],
    "name": "log",
    "id": "functionlog"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 23,
    "codeStart": 24,
    "code": "}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "lowercase"
      },
      {
        "type": "signature",
        "string": "{{lowercase input}}"
      },
      {
        "type": "param",
        "string": "{string} input",
        "name": "input",
        "description": "",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#lowercase}}<TEMPLATE>{{/lowercase}}"
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Lowercase the a string or content block</p>\n",
      "summary": "Lowercase the a string or content block",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 16,
    "code": "function lowercase (...args) {\n  const options = args.pop();\n\n  if (options.fn) return String(options.fn(this)).toLowerCase();\n\n  if (args.length) {\n    return String(args[0]).toLowerCase();\n  }\n\n  throw new Error('Handlebars Helper \"lowercase\" needs 1 parameter minimum if not used as a block helper');\n};",
    "ctx": {
      "type": "function",
      "name": "lowercase",
      "string": "lowercase()"
    },
    "filename": "src/kit/lowercase.js",
    "signatures": [
      {
        "signature": "{{lowercase input}}",
        "params": [
          {
            "type": "param",
            "string": "{string} input",
            "name": "input",
            "description": "",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#lowercase}}<TEMPLATE>{{/lowercase}}",
        "params": [],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "lowercase",
    "id": "functionlowercase"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 27,
    "codeStart": 28,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{lowercase a}}',\n\t\t\tinput: { a: 'PRAESENT COMMODO CURSUS MAGNA, VEL SCELERISQUE NISL CONSECTETUR ET' },\n\t\t\toutput: 'praesent commodo cursus magna, vel scelerisque nisl consectetur et',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#lowercase}}{{a}}{{/lowercase}}',\n\t\t\tinput: { a: 'PRAESENT COMMODO CURSUS MAGNA, VEL SCELERISQUE NISL CONSECTETUR ET' },\n\t\t\toutput: 'praesent commodo cursus magna, vel scelerisque nisl consectetur et',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "logic"
      },
      {
        "type": "signature",
        "string": "{{lt value test}}"
      },
      {
        "type": "param",
        "string": "{string|integer} value1",
        "name": "value1",
        "description": "",
        "types": "string, integer",
        "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string|integer} value2",
        "name": "value2",
        "description": "",
        "types": "string, integer",
        "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean}",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#lt value test}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/lt}}"
      }
    ],
    "description": {
      "full": "<p>Tests if the first argument is less than the second argument.\nMay be used inline or as a conditional block.</p>\n",
      "summary": "Tests if the first argument is less than the second argument.\nMay be used inline or as a conditional block.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 17,
    "code": "function lt (a, b, options) {\n  if (arguments.length !== 3) {\n    throw new Error('Handlebars Helper \"lt\" needs 2 parameters');\n  }\n\n  if (!options.fn) return a < b || '';\n  if (a < b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n\n};",
    "ctx": {
      "type": "function",
      "name": "lt",
      "string": "lt()"
    },
    "filename": "src/kit/lt.js",
    "signatures": [
      {
        "signature": "{{lt value test}}",
        "params": [
          {
            "type": "param",
            "string": "{string|integer} value1",
            "name": "value1",
            "description": "",
            "types": "string, integer",
            "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string|integer} value2",
            "name": "value2",
            "description": "",
            "types": "string, integer",
            "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{boolean}",
          "types": "boolean",
          "typesDescription": "<code>boolean</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#lt value test}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/lt}}",
        "params": [],
        "examples": []
      }
    ],
    "aliases": "",
    "category": [
      "logic"
    ],
    "name": "lt",
    "id": "functionlt"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 30,
    "codeStart": 31,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{lt a b}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{lt a b}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{lt a b}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#lt a b}}yes{{else}}no{{/lt}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#lt a b}}yes{{else}}no{{/lt}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#lt a b}}yes{{else}}no{{/lt}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 24,
    "codeStart": 25,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{add a b c d}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 4, c: 5, d: 6 },\n\t\t\toutput: '21',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{add a b}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 0 },\n\t\t\toutput: '6',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{add a}}',\n\t\t\tinput: { a: [ 1, 2, 3 ] },\n\t\t\toutput: '6',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 30,
    "codeStart": 31,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{lte a b}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{lte a b}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{lte a b}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#lte a b}}yes{{else}}no{{/lte}}',\n\t\t\tinput: { a: 1, b: 2 },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#lte a b}}yes{{else}}no{{/lte}}',\n\t\t\tinput: { a: 2, b: 1 },\n\t\t\toutput: 'no',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#lte a b}}yes{{else}}no{{/lte}}',\n\t\t\tinput: { a: 2, b: 2 },\n\t\t\toutput: 'yes',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "math"
      },
      {
        "type": "name",
        "string": "max"
      },
      {
        "type": "signature",
        "string": "{{max value1 value2 ... valueN}}"
      },
      {
        "type": "param",
        "string": "{number} value1",
        "name": "value1",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} value2",
        "name": "value2",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} [valueN]",
        "name": "valueN",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{number}",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Finds the maximum of all passed values</p>\n",
      "summary": "Finds the maximum of all passed values",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 17,
    "code": "function max (...args) {\n  args.pop();\n\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"max\" needs at least 2 parameters');\n  }\n\n  return Math.max(...flatten(args));\n};",
    "ctx": {
      "type": "function",
      "name": "max",
      "string": "max()"
    },
    "filename": "src/kit/max.js",
    "signatures": [
      {
        "signature": "{{max value1 value2 ... valueN}}",
        "params": [
          {
            "type": "param",
            "string": "{number} value1",
            "name": "value1",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} value2",
            "name": "value2",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} [valueN]",
            "name": "valueN",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{number}",
          "types": "number",
          "typesDescription": "<code>number</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "math"
    ],
    "name": "max",
    "id": "functionmax"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 26,
    "codeStart": 27,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{max a b c d}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 4, c: 5, d: 6 },\n\t\t\toutput: '6',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{max a b}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 0 },\n\t\t\toutput: '3',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{max a}}',\n\t\t\tinput: { a: [ -1, 0, 3 ] },\n\t\t\toutput: '3',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "math"
      },
      {
        "type": "name",
        "string": "mean"
      },
      {
        "type": "signature",
        "string": "{{mean value1 value2 ... valueN}}"
      },
      {
        "type": "param",
        "string": "{...Array<number>|number} values Numbers or arrays of numbers to be averaged",
        "name": "values",
        "description": "Numbers or arrays of numbers to be averaged",
        "types": "Array.<number>, number",
        "typesDescription": "...<code>Array</code>.&lt;<code>number</code>&gt;|<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": true
      },
      {
        "type": "return",
        "string": "{number} Returns the mean average of all values passed in",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "Returns the mean average of all values passed in"
      }
    ],
    "description": {
      "full": "<p>Find the mean average of all values provided</p>\n",
      "summary": "Find the mean average of all values provided",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 15,
    "code": "function mean (...args) {\n  args.pop();\n\n  if (args.length <= 1) {\n    throw new Error('Handlebars Helper \"add\" needs 1 parameter minimum');\n  }\n\n  args = flatten(args);\n\n  const sum = args.reduce((a, b) => a + b, 0);\n  return args.length ? sum / args.length : 0;\n};",
    "ctx": {
      "type": "function",
      "name": "mean",
      "string": "mean()"
    },
    "filename": "src/kit/mean.js",
    "signatures": [
      {
        "signature": "{{mean value1 value2 ... valueN}}",
        "params": [
          {
            "type": "param",
            "string": "{...Array<number>|number} values Numbers or arrays of numbers to be averaged",
            "name": "values",
            "description": "Numbers or arrays of numbers to be averaged",
            "types": "Array.<number>, number",
            "typesDescription": "...<code>Array</code>.&lt;<code>number</code>&gt;|<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": true
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{number} Returns the mean average of all values passed in",
          "types": "number",
          "typesDescription": "<code>number</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "Returns the mean average of all values passed in"
        }
      }
    ],
    "aliases": "",
    "category": [
      "math"
    ],
    "name": "mean",
    "id": "functionmean"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 27,
    "codeStart": 28,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{mean a b c d}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 4, c: 5, d: 6 },\n\t\t\toutput: '3.5',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "math"
      },
      {
        "type": "name",
        "string": "min"
      },
      {
        "type": "signature",
        "string": "{{min value1 value2 ... valueN}}"
      },
      {
        "type": "param",
        "string": "{number} value1",
        "name": "value1",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} value2",
        "name": "value2",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} [valueN]",
        "name": "valueN",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{number}",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Finds the minimum of all passed values</p>\n",
      "summary": "Finds the minimum of all passed values",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 17,
    "code": "function min (...args) {\n  args.pop();\n\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"max\" needs at least 2 parameters');\n  }\n\n  return Math.min(...flatten(args));\n};",
    "ctx": {
      "type": "function",
      "name": "min",
      "string": "min()"
    },
    "filename": "src/kit/min.js",
    "signatures": [
      {
        "signature": "{{min value1 value2 ... valueN}}",
        "params": [
          {
            "type": "param",
            "string": "{number} value1",
            "name": "value1",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} value2",
            "name": "value2",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} [valueN]",
            "name": "valueN",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{number}",
          "types": "number",
          "typesDescription": "<code>number</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "math"
    ],
    "name": "min",
    "id": "functionmin"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 26,
    "codeStart": 27,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{min a b c d}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 4, c: 5, d: 6 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{min a b}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 0 },\n\t\t\toutput: '0',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{min a}}',\n\t\t\tinput: { a: [ -1, 0, 3 ] },\n\t\t\toutput: '-1',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "math"
      },
      {
        "type": "name",
        "string": "mul"
      },
      {
        "type": "signature",
        "string": "{{mul value1 value2 ... valueN}}"
      },
      {
        "type": "param",
        "string": "{number} value1",
        "name": "value1",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} value2",
        "name": "value2",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} [valueN]",
        "name": "valueN",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{number}",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Multiplies two or more values.\nIf more than two values are provided, the result of the previous two multiplications\nwill be divided with the next. If any value is 0, the result of the division will be zero.</p>\n",
      "summary": "Multiplies two or more values.\nIf more than two values are provided, the result of the previous two multiplications\nwill be divided with the next. If any value is 0, the result of the division will be zero.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 19,
    "code": "function mul (...args) {\n  args.pop();\n\n  if (args.length < 2 && !isArray(args[0])) {\n    throw new Error('Handlebars Helper \"mul\" needs 2 parameters minimum');\n  }\n\n  args = flatten(args);\n\n  const initial = args.shift();\n  return args.reduce((a, b) => a * b, initial);\n};",
    "ctx": {
      "type": "function",
      "name": "mul",
      "string": "mul()"
    },
    "filename": "src/kit/mul.js",
    "signatures": [
      {
        "signature": "{{mul value1 value2 ... valueN}}",
        "params": [
          {
            "type": "param",
            "string": "{number} value1",
            "name": "value1",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} value2",
            "name": "value2",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} [valueN]",
            "name": "valueN",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{number}",
          "types": "number",
          "typesDescription": "<code>number</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "math"
    ],
    "name": "mul",
    "id": "functionmul"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 31,
    "codeStart": 32,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{mul a b c d}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 4, c: 5, d: 6 },\n\t\t\toutput: '720',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{mul a b}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 0 },\n\t\t\toutput: '0',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{mul a}}',\n\t\t\tinput: { a: [ 1, 2, 3 ] },\n\t\t\toutput: '6',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections,strings"
      },
      {
        "type": "signature",
        "string": "{{notEmpty input}}"
      },
      {
        "type": "param",
        "string": "{string|array|object} input",
        "name": "input",
        "description": "",
        "types": "string, array, object",
        "typesDescription": "<code>string</code>|<code>array</code>|<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean}",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#notEmpty input}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/notEmpty}}"
      },
      {
        "type": "example",
        "string": "// items = ['a']\n{{#notEmpty items}}is not empty{{else}}is empty{{/notEmpty}}\n// Result: 'is not empty'"
      }
    ],
    "description": {
      "full": "<p>Tests if the provided input is not empty (string, array or object)\nMay be used inline or as a conditional block.</p>\n",
      "summary": "Tests if the provided input is not empty (string, array or object)\nMay be used inline or as a conditional block.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 20,
    "code": "function notEmpty (...args) {\n  const options = args.pop();\n  const [ input ] = args;\n\n  var result = !!sizeOf(input);\n\n  if (!options.fn) {\n    return result || '';\n  }\n  return result ? options.fn(this) : options.inverse(this);\n\n};",
    "ctx": {
      "type": "function",
      "name": "notEmpty",
      "string": "notEmpty()"
    },
    "filename": "src/kit/notEmpty.js",
    "signatures": [
      {
        "signature": "{{notEmpty input}}",
        "params": [
          {
            "type": "param",
            "string": "{string|array|object} input",
            "name": "input",
            "description": "",
            "types": "string, array, object",
            "typesDescription": "<code>string</code>|<code>array</code>|<code>object</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{boolean}",
          "types": "boolean",
          "typesDescription": "<code>boolean</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#notEmpty input}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/notEmpty}}",
        "params": [],
        "examples": [
          "// items = ['a']\n{{#notEmpty items}}is not empty{{else}}is empty{{/notEmpty}}\n// Result: 'is not empty'"
        ]
      }
    ],
    "aliases": "",
    "category": [
      "collections",
      "strings"
    ],
    "name": "notEmpty",
    "id": "functionnotEmpty"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 32,
    "codeStart": 33,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{notEmpty a }}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{notEmpty a }}',\n\t\t\tinput: { a: '' },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{notEmpty a }}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{notEmpty a }}',\n\t\t\tinput: { a: {} },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{notEmpty a }}',\n\t\t\tinput: { a: [ 0 ] },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{notEmpty a }}',\n\t\t\tinput: { a: [ 1 ] },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{notEmpty a }}',\n\t\t\tinput: { a: { a: 0 } },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{notEmpty a }}',\n\t\t\tinput: { a: { a: 1 } },\n\t\t\toutput: 'true',\n\t\t},\n\n\t\t{\n\t\t\ttemplate: '{{#notEmpty a }}yes{{else}}no{{/notEmpty}}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#notEmpty a }}yes{{else}}no{{/notEmpty}}',\n\t\t\tinput: { a: '' },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "number"
      },
      {
        "type": "signature",
        "string": "{{number value [precision]}}"
      },
      {
        "type": "param",
        "string": "{number} value",
        "name": "value",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} precision Optional number of decimal places to abbreviate to (default is 0)",
        "name": "precision",
        "description": "Optional number of decimal places to abbreviate to (default is 0)",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Converts a whole number into an abbreviated form (eg, 1200000 into 1.2M)</p>\n",
      "summary": "Converts a whole number into an abbreviated form (eg, 1200000 into 1.2M)",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 14,
    "code": "function number (...args) {\n  const options = args.pop();\n\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"number\" needs at least 1 parameter');\n  }\n\n  const [ value, precision, grouping ] = args;\n\n  const { locale, currency } = options.hash;\n\n  return !isNaN(value) && Number(value).toLocaleString(locale, {\n    style: currency ? 'currency' : 'decimal',\n    minimumFractionDigits: precision || 0,\n    maximumFractionDigits: precision || 0,\n    useGrouping: grouping === undefined ? true : grouping,\n    locale,\n    currency,\n  }) || '';\n};",
    "ctx": {
      "type": "function",
      "name": "number",
      "string": "number()"
    },
    "filename": "src/kit/number.js",
    "signatures": [
      {
        "signature": "{{number value [precision]}}",
        "params": [
          {
            "type": "param",
            "string": "{number} value",
            "name": "value",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} precision Optional number of decimal places to abbreviate to (default is 0)",
            "name": "precision",
            "description": "Optional number of decimal places to abbreviate to (default is 0)",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "number",
    "id": "functionnumber"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 34,
    "codeStart": 35,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{number a}}',\n\t\t\tinput: { a: 1234.56 },\n\t\t\toutput: '1,235',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{number a b false}}',\n\t\t\tinput: { a: 1234.5678, b: '2' },\n\t\t\toutput: '1234.57',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{number a b currency=c}}',\n\t\t\tinput: { a: 1234.56, b: 2, c: 'USD' },\n\t\t\toutput: 'US$ 1,234.56',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{number a}}',\n\t\t\tinput: { a: 1000 },\n\t\t\toutput: '1,000',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{number a b}}',\n\t\t\tinput: { a: 1000.55, b: 1 },\n\t\t\toutput: '1,000.6',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{number a b }}',\n\t\t\tinput: { a: 67000, b: 5 },\n\t\t\toutput: '67,000.00000',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{number a b}}',\n\t\t\tinput: { a: 0.9, b: 0 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{number a b}}',\n\t\t\tinput: { a: '1.20', b: 2 },\n\t\t\toutput: '1.20',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{number a b}}',\n\t\t\tinput: { a: '1.20', b: 4 },\n\t\t\toutput: '1.2000',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{number a b}}',\n\t\t\tinput: { a: '1.2000', b: 3 },\n\t\t\toutput: '1.200',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{number a b}}',\n\t\t\tinput: { a: '1 000,50', b: 2 },\n\t\t\toutput: '',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "contains"
      },
      {
        "type": "signature",
        "string": "{{numberFormat value [precision] [decimalPoint] [thousandsSeparator]}}"
      },
      {
        "type": "param",
        "string": "{number} value",
        "name": "value",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} [precision]    Number of decimal points to display (default is 0)",
        "name": "precision",
        "description": "Number of decimal points to display (default is 0)",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} [decimalPoint] Character to use for the decimal point (Default is a single period)",
        "name": "decimalPoint",
        "description": "Character to use for the decimal point (Default is a single period)",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} [thousandsSeparator]    Character to use to mark thousands (eg, 1,000) (Default is a single comma)",
        "name": "thousandsSeparator",
        "description": "Character to use to mark thousands (eg, 1,000) (Default is a single comma)",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Format a floating point number</p>\n",
      "summary": "Format a floating point number",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 16,
    "code": "function numberFormat (value, precision, decimalPoint, thousands) {\n  // account for options argument\n  var argc = arguments.length - 1;\n\n  if (argc === 0) {\n    throw new Error('Handlebars Helper \"numberFormat\" needs 1 parameter minimum');\n  }\n\n  if (argc === 3 || thousands === undefined) {\n    thousands = ',';\n  }\n\n  if (!thousands) {\n    thousands = '';\n  }\n\n  if (argc === 2 || decimalPoint === undefined) {\n    decimalPoint = '.';\n  }\n\n  if (argc === 1 || precision === undefined) {\n    precision = 0;\n  } else {\n    precision = parseInt(precision, 10);\n  }\n\n  // strip any non-numeric characters\n  value = String(value).replace(/[^0-9+\\-Ee.]/g, '');\n\n  var result;\n  if (precision) {\n    // round at the needed precision and then split on the decimal.\n    var k = Math.pow(10, precision);\n    result = String(Math.round(value * k) / k).split('.');\n\n    // if no decimal existed, make sure we create a place for it.\n    if (result.length === 1) result.push('');\n  } else {\n    // parse as float and round off, then store in an array to simplify below.\n    result = [ Math.round(parseFloat(value)) ];\n  }\n\n  // insert any thousands marks as needed\n  if (thousands) {\n    result[0] = String(result[0]).replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, thousands);\n  }\n\n  // pad out the decimal places as needed\n  if (precision && result[1].length < precision) {\n    result[1] += new Array(precision - result[1].length + 1).join('0');\n  }\n\n  return precision ? result.join(decimalPoint) : result[0];\n\n};",
    "ctx": {
      "type": "function",
      "name": "contains",
      "string": "numberFormat()"
    },
    "filename": "src/kit/numberFormat.js",
    "signatures": [
      {
        "signature": "{{numberFormat value [precision] [decimalPoint] [thousandsSeparator]}}",
        "params": [
          {
            "type": "param",
            "string": "{number} value",
            "name": "value",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} [precision]    Number of decimal points to display (default is 0)",
            "name": "precision",
            "description": "Number of decimal points to display (default is 0)",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} [decimalPoint] Character to use for the decimal point (Default is a single period)",
            "name": "decimalPoint",
            "description": "Character to use for the decimal point (Default is a single period)",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} [thousandsSeparator]    Character to use to mark thousands (eg, 1,000) (Default is a single comma)",
            "name": "thousandsSeparator",
            "description": "Character to use to mark thousands (eg, 1,000) (Default is a single comma)",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "contains",
    "id": "functioncontains"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 71,
    "codeStart": 72,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{numberFormat a}}',\n\t\t\tinput: { a: 1234.56 },\n\t\t\toutput: '1,235',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{numberFormat a b c d}}',\n\t\t\tinput: { a: 1234.5678, b: '2', c: '.', d: '' },\n\t\t\toutput: '1234.57',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{numberFormat a b c d}}',\n\t\t\tinput: { a: 1234.56, b: 2, c: ',', d: ' ' },\n\t\t\toutput: '1 234,56',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{numberFormat a b c d}}',\n\t\t\tinput: { a: 67, b: 2, c: ',', d: '.' },\n\t\t\toutput: '67,00',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{numberFormat a}}',\n\t\t\tinput: { a: 1000 },\n\t\t\toutput: '1,000',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{numberFormat a b}}',\n\t\t\tinput: { a: 1000.55, b: 1 },\n\t\t\toutput: '1,000.6',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{numberFormat a b c d}}',\n\t\t\tinput: { a: 67000, b: 5, c: ',', d: '.' },\n\t\t\toutput: '67.000,00000',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{numberFormat a b}}',\n\t\t\tinput: { a: 0.9, b: 0 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{numberFormat a b}}',\n\t\t\tinput: { a: '1.20', b: 2 },\n\t\t\toutput: '1.20',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{numberFormat a b}}',\n\t\t\tinput: { a: '1.20', b: 4 },\n\t\t\toutput: '1.2000',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{numberFormat a b}}',\n\t\t\tinput: { a: '1.2000', b: 3 },\n\t\t\toutput: '1.200',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{numberFormat a b c d}}',\n\t\t\tinput: { a: '1 000,50', b: 2, c: '.', d: ' ' },\n\t\t\toutput: '100 050.00',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "ordinalize"
      },
      {
        "type": "signature",
        "string": "{{ordinalize value}}"
      },
      {
        "type": "param",
        "string": "{number} value",
        "name": "value",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Adds a ordinal suffix to a number (eg, 1st, 2nd, 3rd)</p>\n",
      "summary": "Adds a ordinal suffix to a number (eg, 1st, 2nd, 3rd)",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 13,
    "code": "function ordinalize (value) {\n  if (arguments.length === 1) {\n    throw new Error('Handlebars Helper \"ordinalize\" needs 1 parameter');\n  }\n\n  var normal = Math.abs(Math.round(value));\n  value = String(value);\n  if ([ 11, 12, 13 ].indexOf(normal % 100) >= 0) {\n    return value + 'th';\n  }\n  switch (normal % 10) {\n  case 1:\n    return value + 'st';\n  case 2:\n    return value + 'nd';\n  case 3:\n    return value + 'rd';\n  default:\n    return value + 'th';\n  }\n\n};",
    "ctx": {
      "type": "function",
      "name": "ordinalize",
      "string": "ordinalize()"
    },
    "filename": "src/kit/ordinalize.js",
    "signatures": [
      {
        "signature": "{{ordinalize value}}",
        "params": [
          {
            "type": "param",
            "string": "{number} value",
            "name": "value",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "ordinalize",
    "id": "functionordinalize"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 35,
    "codeStart": 36,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: '1st',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 2 },\n\t\t\toutput: '2nd',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 3 },\n\t\t\toutput: '3rd',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 4 },\n\t\t\toutput: '4th',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 5 },\n\t\t\toutput: '5th',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 6 },\n\t\t\toutput: '6th',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 7 },\n\t\t\toutput: '7th',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 8 },\n\t\t\toutput: '8th',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 9 },\n\t\t\toutput: '9th',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 10 },\n\t\t\toutput: '10th',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 11 },\n\t\t\toutput: '11th',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 12 },\n\t\t\toutput: '12th',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 13 },\n\t\t\toutput: '13th',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 14 },\n\t\t\toutput: '14th',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 20 },\n\t\t\toutput: '20th',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 21 },\n\t\t\toutput: '21st',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 22 },\n\t\t\toutput: '22nd',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 100 },\n\t\t\toutput: '100th',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{ordinalize a}}',\n\t\t\tinput: { a: 101 },\n\t\t\toutput: '101st',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "padEnd"
      },
      {
        "type": "signature",
        "string": "{{padEnd input length [using]}}"
      },
      {
        "type": "param",
        "string": "{string} input",
        "name": "input",
        "description": "",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} length",
        "name": "length",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} [using] Optional character to pad with. Defaults to a single space.",
        "name": "using",
        "description": "Optional character to pad with. Defaults to a single space.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Pads a string with characters on the right side.</p>\n",
      "summary": "Pads a string with characters on the right side.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 15,
    "code": "function padEnd (...args) {\n  args.pop();\n  const [ input, length, using ] = args;\n\n  return String(input).padEnd(length, using);\n};",
    "ctx": {
      "type": "function",
      "name": "padEnd",
      "string": "padEnd()"
    },
    "filename": "src/kit/padEnd.js",
    "signatures": [
      {
        "signature": "{{padEnd input length [using]}}",
        "params": [
          {
            "type": "param",
            "string": "{string} input",
            "name": "input",
            "description": "",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} length",
            "name": "length",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} [using] Optional character to pad with. Defaults to a single space.",
            "name": "using",
            "description": "Optional character to pad with. Defaults to a single space.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "padEnd",
    "id": "functionpadEnd"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 21,
    "codeStart": 22,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{padEnd a}}',\n\t\t\tinput: { a: '1234567890' },\n\t\t\toutput: '1234567890',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{padEnd a b}}',\n\t\t\tinput: { a: '1234567890', b: 10 },\n\t\t\toutput: '1234567890',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{padEnd a b}}',\n\t\t\tinput: { a: '1234567890', b: 12 },\n\t\t\toutput: '1234567890  ',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{{padEnd a b c}}}',\n\t\t\tinput: { a: '1234567890', b: 12, c: '.' },\n\t\t\toutput: '1234567890..',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{{padEnd a b c}}}',\n\t\t\tinput: { a: '1234567890', b: 13, c: 'abcdef' },\n\t\t\toutput: '1234567890abc',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "padStart"
      },
      {
        "type": "signature",
        "string": "{{padStart input length [using]}}"
      },
      {
        "type": "param",
        "string": "{string} input",
        "name": "input",
        "description": "",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} length",
        "name": "length",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} [using] Optional character to pad with. Defaults to a single space.",
        "name": "using",
        "description": "Optional character to pad with. Defaults to a single space.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Pads a string with characters on the left side.</p>\n",
      "summary": "Pads a string with characters on the left side.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 15,
    "code": "function padStart (...args) {\n  args.pop();\n  const [ input, length, using ] = args;\n\n  return String(input).padStart(length, using);\n};",
    "ctx": {
      "type": "function",
      "name": "padStart",
      "string": "padStart()"
    },
    "filename": "src/kit/padStart.js",
    "signatures": [
      {
        "signature": "{{padStart input length [using]}}",
        "params": [
          {
            "type": "param",
            "string": "{string} input",
            "name": "input",
            "description": "",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} length",
            "name": "length",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} [using] Optional character to pad with. Defaults to a single space.",
            "name": "using",
            "description": "Optional character to pad with. Defaults to a single space.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "padStart",
    "id": "functionpadStart"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 21,
    "codeStart": 22,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{padStart a}}',\n\t\t\tinput: { a: '1234567890' },\n\t\t\toutput: '1234567890',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{padStart a b}}',\n\t\t\tinput: { a: '1234567890', b: 10 },\n\t\t\toutput: '1234567890',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{padStart a b}}',\n\t\t\tinput: { a: '1234567890', b: 12 },\n\t\t\toutput: '  1234567890',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{{padStart a b c}}}',\n\t\t\tinput: { a: '1234567890', b: 12, c: '.' },\n\t\t\toutput: '..1234567890',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{{padStart a b c}}}',\n\t\t\tinput: { a: '1234567890', b: 13, c: 'abcdefg' },\n\t\t\toutput: 'abc1234567890',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "phone"
      },
      {
        "type": "signature",
        "string": "{{phone number}}"
      },
      {
        "type": "param",
        "string": "{string|number} number",
        "name": "number",
        "description": "",
        "types": "string, number",
        "typesDescription": "<code>string</code>|<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Strips non-numeric characters and reformats as a US phone number (eg (XXX) XXX-XXXX)\nReturns the value stripped of non-numerics if the result is not ten digits long</p>\n",
      "summary": "Strips non-numeric characters and reformats as a US phone number (eg (XXX) XXX-XXXX)\nReturns the value stripped of non-numerics if the result is not ten digits long",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 14,
    "code": "function phone (number) {\n  if (arguments.length === 1) {\n    throw new Error('Handlebars Helper \"phoneNumber\" needs 1 parameter minimum');\n  }\n\n  // strip non digits\n  number = String(number).replace(/[^0-9]/, '');\n\n  if (number.length < 10) {\n    return number;\n  }\n\n  var stack = [ '(', number.substr(-10, 3), ') ', number.substr(-7, 3), '-', number.substr(-4) ];\n\n  if (number.length > 10) {\n    stack.unshift(number.substr(0, number.length - 10) + ' ');\n  }\n\n  return stack.join('');\n};",
    "ctx": {
      "type": "function",
      "name": "phone",
      "string": "phone()"
    },
    "filename": "src/kit/phone.js",
    "signatures": [
      {
        "signature": "{{phone number}}",
        "params": [
          {
            "type": "param",
            "string": "{string|number} number",
            "name": "number",
            "description": "",
            "types": "string, number",
            "typesDescription": "<code>string</code>|<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "phone",
    "id": "functionphone"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 34,
    "codeStart": 35,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{phone a}}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{phone a}}',\n\t\t\tinput: { a: 1234567 },\n\t\t\toutput: '1234567',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{phone a}}',\n\t\t\tinput: { a: 1234567890 },\n\t\t\toutput: '(123) 456-7890',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{phone a}}',\n\t\t\tinput: { a: 123456789012 },\n\t\t\toutput: '12 (345) 678-9012',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "math"
      },
      {
        "type": "name",
        "string": "pi"
      },
      {
        "type": "signature",
        "string": "{{pi}}"
      },
      {
        "type": "return",
        "string": "{number}",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Returns the value of pi</p>\n",
      "summary": "Returns the value of pi",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 12,
    "code": "function pi () {\n  return Math.PI;\n};",
    "ctx": {
      "type": "function",
      "name": "pi",
      "string": "pi()"
    },
    "filename": "src/kit/pi.js",
    "signatures": [
      {
        "signature": "{{pi}}",
        "params": [],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{number}",
          "types": "number",
          "typesDescription": "<code>number</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "math"
    ],
    "name": "pi",
    "id": "functionpi"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 15,
    "codeStart": 16,
    "code": "}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "math"
      },
      {
        "type": "name",
        "string": "pow"
      },
      {
        "type": "signature",
        "string": "{{pow base exponent}}"
      },
      {
        "type": "param",
        "string": "{number} base",
        "name": "base",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} exponent",
        "name": "exponent",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{number}",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Returns the base to the exponent power</p>\n",
      "summary": "Returns the base to the exponent power",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 14,
    "code": "function pow (base, exponent) {\n  if (arguments.length < 3) {\n    throw new Error('Handlebars Helper \"pow\" needs at least 2 parameters');\n  }\n\n  return Math.pow(base, exponent);\n};",
    "ctx": {
      "type": "function",
      "name": "pow",
      "string": "pow()"
    },
    "filename": "src/kit/pow.js",
    "signatures": [
      {
        "signature": "{{pow base exponent}}",
        "params": [
          {
            "type": "param",
            "string": "{number} base",
            "name": "base",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} exponent",
            "name": "exponent",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{number}",
          "types": "number",
          "typesDescription": "<code>number</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "math"
    ],
    "name": "pow",
    "id": "functionpow"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 21,
    "codeStart": 22,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{pow a b}}',\n\t\t\tinput: { a: 10, b: 4 },\n\t\t\toutput: '10000',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{pow a b}}',\n\t\t\tinput: { a: 6, b: 0 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{pow a b}}',\n\t\t\tinput: { a: 6, b: 1 },\n\t\t\toutput: '6',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "layout"
      },
      {
        "type": "name",
        "string": "prepend"
      },
      {
        "type": "signature",
        "string": "{{#prepend name}}<TEMPLATE>{{/prepend}}"
      },
      {
        "type": "param",
        "string": "{string} name    Name of the content block to prepend to",
        "name": "name",
        "description": "Name of the content block to prepend to",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{null}",
        "types": "",
        "typesDescription": "<code>null</code>",
        "optional": false,
        "nullable": true,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Prepends the contained content onto a layout block.</p>\n",
      "summary": "Prepends the contained content onto a layout block.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 13,
    "code": "function prepend (...args) {\n  if (args.length === 1) {\n    throw new Error('Handlebars Helper \"prepend\" needs 1 parameter');\n  }\n\n  const options = args.pop();\n  const name = args[0];\n\n  this._blocks = this._blocks || {};\n\n  this._blocks[name] = {\n    mode: 'prepend',\n    fn: options.fn,\n  };\n};",
    "ctx": {
      "type": "function",
      "name": "prepend",
      "string": "prepend()"
    },
    "filename": "src/kit/prepend.js",
    "signatures": [
      {
        "signature": "{{#prepend name}}<TEMPLATE>{{/prepend}}",
        "params": [
          {
            "type": "param",
            "string": "{string} name    Name of the content block to prepend to",
            "name": "name",
            "description": "Name of the content block to prepend to",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{null}",
          "types": "",
          "typesDescription": "<code>null</code>",
          "optional": false,
          "nullable": true,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "layout"
    ],
    "name": "prepend",
    "id": "functionprepend"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 28,
    "codeStart": 29,
    "code": "}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "math"
      },
      {
        "type": "name",
        "string": "random"
      },
      {
        "type": "signature",
        "string": "{{random}}"
      },
      {
        "type": "describe",
        "string": "Generates an random floating point between 0 and 1"
      },
      {
        "type": "return",
        "string": "{number}",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{random max}}"
      },
      {
        "type": "describe",
        "string": "Generates an integer between zero and the `max` value, or max and 0 if max is negative"
      },
      {
        "type": "param",
        "string": "{number} max [description]",
        "name": "max",
        "description": "[description]",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{number}",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{random min max}}"
      },
      {
        "type": "describe",
        "string": "Generates an integer between the `min` and `max` values"
      },
      {
        "type": "param",
        "string": "{number} min  [description]",
        "name": "min",
        "description": "[description]",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} max [description]",
        "name": "max",
        "description": "[description]",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{number}",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Generates a random number using Math.random()</p>\n",
      "summary": "Generates a random number using Math.random()",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 24,
    "code": "function random (min, max) {\n  switch (arguments.length) {\n  case 1:\n    return Math.random();\n  case 2:\n    if (min > 0) {\n      max = min;\n      min = 0;\n    } else {\n      max = 0;\n    }\n    break;\n  default:\n    // do nothing\n  }\n\n  if (max === min) return max; // no need to do that math\n\n  return Math.floor((Math.random() * (max - min )) + min);\n};",
    "ctx": {
      "type": "function",
      "name": "random",
      "string": "random()"
    },
    "filename": "src/kit/random.js",
    "signatures": [
      {
        "signature": "{{random}}",
        "params": [],
        "examples": [],
        "description": "<p>Generates an random floating point between 0 and 1</p>\n",
        "returns": {
          "type": "return",
          "string": "{number}",
          "types": "number",
          "typesDescription": "<code>number</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{random max}}",
        "params": [
          {
            "type": "param",
            "string": "{number} max [description]",
            "name": "max",
            "description": "[description]",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>Generates an integer between zero and the <code>max</code> value, or max and 0 if max is negative</p>\n",
        "returns": {
          "type": "return",
          "string": "{number}",
          "types": "number",
          "typesDescription": "<code>number</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{random min max}}",
        "params": [
          {
            "type": "param",
            "string": "{number} min  [description]",
            "name": "min",
            "description": "[description]",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} max [description]",
            "name": "max",
            "description": "[description]",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>Generates an integer between the <code>min</code> and <code>max</code> values</p>\n",
        "returns": {
          "type": "return",
          "string": "{number}",
          "types": "number",
          "typesDescription": "<code>number</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "math"
    ],
    "name": "random",
    "id": "functionrandom"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 44,
    "codeStart": 45,
    "code": "}\n\nexport function test () {\n\t// no tests\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "replace"
      },
      {
        "type": "signature",
        "string": "{{replace haystack needle replacement regex}}"
      },
      {
        "type": "param",
        "string": "{string} haystack",
        "name": "haystack",
        "description": "",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string|RegExp} needle",
        "name": "needle",
        "description": "",
        "types": "string, RegExp",
        "typesDescription": "<code>string</code>|<code>RegExp</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} replacement",
        "name": "replacement",
        "description": "",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} [regex] Pass true to evaluate needle as a regular expression",
        "name": "regex",
        "description": "Pass true to evaluate needle as a regular expression",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Searches for a needle within a haystack and substitutes a replacement for all matchs.</p>\n",
      "summary": "Searches for a needle within a haystack and substitutes a replacement for all matchs.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 16,
    "code": "function replace (...args) {\n  const options = args.pop();\n  let haystack;\n  if (options.fn) haystack = options.fn(this);\n  else haystack = String(args.shift());\n\n  const needle = args[2] ? new RegExp(args[0]) : args[0];\n  const replacement = args[1] || '';\n  const regex = needle instanceof RegExp;\n\n  return regex ? haystack.replace(needle, replacement) : haystack.split(needle).join(replacement);\n};",
    "ctx": {
      "type": "function",
      "name": "replace",
      "string": "replace()"
    },
    "filename": "src/kit/replace.js",
    "signatures": [
      {
        "signature": "{{replace haystack needle replacement regex}}",
        "params": [
          {
            "type": "param",
            "string": "{string} haystack",
            "name": "haystack",
            "description": "",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string|RegExp} needle",
            "name": "needle",
            "description": "",
            "types": "string, RegExp",
            "typesDescription": "<code>string</code>|<code>RegExp</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} replacement",
            "name": "replacement",
            "description": "",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{boolean} [regex] Pass true to evaluate needle as a regular expression",
            "name": "regex",
            "description": "Pass true to evaluate needle as a regular expression",
            "types": "boolean",
            "typesDescription": "<code>boolean</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "replace",
    "id": "functionreplace"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 28,
    "codeStart": 29,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{replace a b c}}',\n\t\t\tinput: { a: 'abcdef', b: 'cd', c: 'xy' },\n\t\t\toutput: 'abxyef',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{replace a b}}',\n\t\t\tinput: { a: 'abcdef', b: 'cd' },\n\t\t\toutput: 'abef',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#replace a b}}abcdef{{/replace}}',\n\t\t\tinput: { a: 'cd', b: 'xy' },\n\t\t\toutput: 'abxyef',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#replace a}}abcdef{{/replace}}',\n\t\t\tinput: { a: 'cd' },\n\t\t\toutput: 'abef',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections,strings,math"
      },
      {
        "type": "name",
        "string": "reverse"
      },
      {
        "type": "signature",
        "string": "(reverse input)"
      },
      {
        "type": "param",
        "string": "{Array<mixed>|string|integer} input",
        "name": "input",
        "description": "",
        "types": "Array.<mixed>, string, integer",
        "typesDescription": "<code>Array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>string</code>|<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Array<mixed>|string|integer}",
        "types": "Array.<mixed>, string, integer",
        "typesDescription": "<code>Array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>string</code>|<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Reverses the order of a string or array, negates an integer, or returns an object with the keys in reverse order</p>\n",
      "summary": "Reverses the order of a string or array, negates an integer, or returns an object with the keys in reverse order",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 15,
    "code": "function reverse (...args) {\n  const options = args.pop();\n  const input = options.fn ? options.fn(this) : args[0];\n\n  if (isString(input)) {\n    return input.split('').reverse().join('');\n  } else if (isNumber(input)) {\n    return 0 - input;\n  } else if (isArray(input)) {\n    return input.reverse();\n  } else if (isObject(input)) {\n    return fromPairs(toPairs(input).reverse());\n  }\n  throw new Error('Handlebars Helper \"reverse\" cannot operate upon ' + (typeof input) + 's.');\n};",
    "ctx": {
      "type": "function",
      "name": "reverse",
      "string": "reverse()"
    },
    "filename": "src/kit/reverse.js",
    "signatures": [
      {
        "signature": "(reverse input)",
        "params": [
          {
            "type": "param",
            "string": "{Array<mixed>|string|integer} input",
            "name": "input",
            "description": "",
            "types": "Array.<mixed>, string, integer",
            "typesDescription": "<code>Array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>string</code>|<a href=\"integer.html\">integer</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{Array<mixed>|string|integer}",
          "types": "Array.<mixed>, string, integer",
          "typesDescription": "<code>Array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>string</code>|<a href=\"integer.html\">integer</a>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "collections",
      "strings",
      "math"
    ],
    "name": "reverse",
    "id": "functionreverse"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 30,
    "codeStart": 31,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{reverse a}}',\n\t\t\tinput: { a: 'abcdef' },\n\t\t\toutput: 'fedcba',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#reverse}}abcdef{{/reverse}}',\n\t\t\tinput: { a: 'abcdef' },\n\t\t\toutput: 'fedcba',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{reverse a}}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: '-1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{reverse a}}',\n\t\t\tinput: { a: [ 'ab', 'cd', 'ef' ] },\n\t\t\toutput: 'ef,cd,ab',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "math"
      },
      {
        "type": "name",
        "string": "round"
      },
      {
        "type": "signature",
        "string": "{{round value}}"
      },
      {
        "type": "param",
        "string": "{number} value",
        "name": "value",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{number}",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Rounds the passed floating point to the nearest whole number</p>\n",
      "summary": "Rounds the passed floating point to the nearest whole number",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 13,
    "code": "function round (value) {\n  if (arguments.length < 2) {\n    throw new Error('Handlebars Helper \"round\" needs 1 at least parameter');\n  }\n\n  return Math.round(value);\n};",
    "ctx": {
      "type": "function",
      "name": "round",
      "string": "round()"
    },
    "filename": "src/kit/round.js",
    "signatures": [
      {
        "signature": "{{round value}}",
        "params": [
          {
            "type": "param",
            "string": "{number} value",
            "name": "value",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{number}",
          "types": "number",
          "typesDescription": "<code>number</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "math"
    ],
    "name": "round",
    "id": "functionround"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 20,
    "codeStart": 21,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{round a}}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{round a}}',\n\t\t\tinput: { a: 0 },\n\t\t\toutput: '0',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{round a}}',\n\t\t\tinput: { a: 0.1 },\n\t\t\toutput: '0',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{round a}}',\n\t\t\tinput: { a: 0.55 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{round a}}',\n\t\t\tinput: { a: 5.6 },\n\t\t\toutput: '6',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "seconds"
      },
      {
        "type": "signature",
        "string": "{{seconds seconds [short=1] [detailed=1]}}"
      },
      {
        "type": "param",
        "string": "{number} seconds [description]",
        "name": "seconds",
        "description": "[description]",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} short [description]",
        "name": "short",
        "description": "[description]",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Convert a second count into human readable time (minutes, hours, days)\nIf the <code>short</code> parameter is truthy, then the function will use abbreviated duration units.\nBy default the function returns the first major unit. If the <code>detailed</code> parameter is truthy,\nthis will be extended to the smallest unit.</p>\n",
      "summary": "Convert a second count into human readable time (minutes, hours, days)\nIf the `short` parameter is truthy, then the function will use abbreviated duration units.\nBy default the function returns the first major unit. If the `detailed` parameter is truthy,\nthis will be extended to the smallest unit.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 17,
    "code": "function seconds (...args) {\n  const options = args.pop();\n\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"seconds\" needs at least 1 parameter');\n  }\n\n  let [ secs ] = args;\n\n  var keysL = [ 'Year',      'Month',    'Week',    'Day',    'Hour',    'Minute',   'Second' ];\n  var keysS = [ 'yr',        'mo',       'wk',      'd',      'h',       'm',        's' ];\n  var divs  = [ 31536000,    2592000,    604800,    86400,    3600,      60,         1 ];\n  var stack = [];\n  var level = 0;\n  var value;\n\n  const short = args[1] || options.hash && options.hash.short;\n  const detailed = options.hash && options.hash.detailed;\n  const keys = short ? keysS : keysL;\n\n  secs = Math.abs(secs);\n\n  while (secs) {\n    value = Math.floor(secs / divs[level]);\n    secs = secs % divs[level];\n    if (value) {\n      let pushable = [ value, keys[level] ].join(short ? '' : ' ');\n      if (!short && value > 1) pushable += 's';\n      stack.push(pushable);\n      if (!detailed) break;\n    }\n    level++;\n  }\n\n  return stack.join(' ');\n\n};",
    "ctx": {
      "type": "function",
      "name": "seconds",
      "string": "seconds()"
    },
    "filename": "src/kit/seconds.js",
    "signatures": [
      {
        "signature": "{{seconds seconds [short=1] [detailed=1]}}",
        "params": [
          {
            "type": "param",
            "string": "{number} seconds [description]",
            "name": "seconds",
            "description": "[description]",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{boolean} short [description]",
            "name": "short",
            "description": "[description]",
            "types": "boolean",
            "typesDescription": "<code>boolean</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "seconds",
    "id": "functionseconds"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 54,
    "codeStart": 55,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{seconds a}}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: '1 Second',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{seconds a}}',\n\t\t\tinput: { a: 2 },\n\t\t\toutput: '2 Seconds',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{seconds a}}',\n\t\t\tinput: { a: 60 },\n\t\t\toutput: '1 Minute',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{seconds a}}',\n\t\t\tinput: { a: 60 * 65 },\n\t\t\toutput: '1 Hour',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{seconds a true}}',\n\t\t\tinput: { a: 60 * 65 },\n\t\t\toutput: '1h',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{seconds a detailed=true}}',\n\t\t\tinput: { a: 60 * 65 },\n\t\t\toutput: '1 Hour 5 Minutes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{seconds a}}',\n\t\t\tinput: { a: 60 * 60 * 24 },\n\t\t\toutput: '1 Day',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{seconds a}}',\n\t\t\tinput: { a: 60 * 60 * 24 * 7 },\n\t\t\toutput: '1 Week',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{seconds a}}',\n\t\t\tinput: { a: 60 * 60 * 24 * 30 },\n\t\t\toutput: '1 Month',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{seconds a}}',\n\t\t\tinput: { a: 60 * 60 * 24 * 365 },\n\t\t\toutput: '1 Year',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{seconds a}}',\n\t\t\tinput: { a: 60 * 60 * 24 * 365 * 100 },\n\t\t\toutput: '100 Years',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections,strings"
      },
      {
        "type": "signature",
        "string": "{{slice input start[ count]}}"
      },
      {
        "type": "param",
        "string": "{string|Array|object|Map|Set} input",
        "name": "input",
        "description": "",
        "types": "string, Array, object, Map, Set",
        "typesDescription": "<code>string</code>|<code>Array</code>|<code>object</code>|<a href=\"Map.html\">Map</a>|<a href=\"Set.html\">Set</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{integer} start  Index to slice from",
        "name": "start",
        "description": "Index to slice from",
        "types": "integer",
        "typesDescription": "<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{integer} [end]  Index to slice to (stopping before)",
        "name": "end",
        "description": "Index to slice to (stopping before)",
        "types": "integer",
        "typesDescription": "<a href=\"integer.html\">integer</a>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{mixed}",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#slice input start[ end]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/slice}}"
      },
      {
        "type": "param",
        "string": "{string|Array|object|Map|Set} input",
        "name": "input",
        "description": "",
        "types": "string, Array, object, Map, Set",
        "typesDescription": "<code>string</code>|<code>Array</code>|<code>object</code>|<a href=\"Map.html\">Map</a>|<a href=\"Set.html\">Set</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{integer} start  Index to slice from",
        "name": "start",
        "description": "Index to slice from",
        "types": "integer",
        "typesDescription": "<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{integer} [end]  Index to slice to (stopping before)",
        "name": "end",
        "description": "Index to slice to (stopping before)",
        "types": "integer",
        "typesDescription": "<a href=\"integer.html\">integer</a>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Returns a slice of an array, object map, or string\nMay be used inline or as an iterator. Else condition evaluates if result is empty.</p>\n",
      "summary": "Returns a slice of an array, object map, or string\nMay be used inline or as an iterator. Else condition evaluates if result is empty.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 22,
    "code": "function slice (...args) {\n  const options = args.pop();\n  const [ input, start, end ] = args;\n\n  if (args.length < 2) {\n    throw new Error('Handlebars Helper \"slice\" needs at least 2 parameters');\n  }\n\n  if (!isString(input) && !isMappable(input)) {\n    throw new Error('Handlebars Helper \"slice\" did not receive a string or collection.');\n  }\n\n  if (!options.fn) {\n    return sliceUtil(input, start, end);\n  }\n\n  if (isString(input)) {\n    if (input.length) {\n      return options.fn(input.slice(start, end));\n    }\n    return options.inverse(this);\n  }\n\n  const results = sliceUtil(input, start, end);\n\n  if (sizeOf(results)) {\n    var data = Handlebars.createFrame(options.data);\n    return map(results, (result, key, i) => {\n      data.index = i;\n      data.key = key;\n      data.first = (i === 0);\n      data.last  = (i === results.length - 1);\n      return options.fn(result, { data });\n    }).join('');\n  }\n  return options.inverse(this);\n};",
    "ctx": {
      "type": "function",
      "name": "slice",
      "string": "slice()"
    },
    "filename": "src/kit/slice.js",
    "signatures": [
      {
        "signature": "{{slice input start[ count]}}",
        "params": [
          {
            "type": "param",
            "string": "{string|Array|object|Map|Set} input",
            "name": "input",
            "description": "",
            "types": "string, Array, object, Map, Set",
            "typesDescription": "<code>string</code>|<code>Array</code>|<code>object</code>|<a href=\"Map.html\">Map</a>|<a href=\"Set.html\">Set</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{integer} start  Index to slice from",
            "name": "start",
            "description": "Index to slice from",
            "types": "integer",
            "typesDescription": "<a href=\"integer.html\">integer</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{integer} [end]  Index to slice to (stopping before)",
            "name": "end",
            "description": "Index to slice to (stopping before)",
            "types": "integer",
            "typesDescription": "<a href=\"integer.html\">integer</a>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{mixed}",
          "types": "mixed",
          "typesDescription": "<a href=\"mixed.html\">mixed</a>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#slice input start[ end]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/slice}}",
        "params": [
          {
            "type": "param",
            "string": "{string|Array|object|Map|Set} input",
            "name": "input",
            "description": "",
            "types": "string, Array, object, Map, Set",
            "typesDescription": "<code>string</code>|<code>Array</code>|<code>object</code>|<a href=\"Map.html\">Map</a>|<a href=\"Set.html\">Set</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{integer} start  Index to slice from",
            "name": "start",
            "description": "Index to slice from",
            "types": "integer",
            "typesDescription": "<a href=\"integer.html\">integer</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{integer} [end]  Index to slice to (stopping before)",
            "name": "end",
            "description": "Index to slice to (stopping before)",
            "types": "integer",
            "typesDescription": "<a href=\"integer.html\">integer</a>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "collections",
      "strings"
    ],
    "name": "slice",
    "id": "functionslice"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 59,
    "codeStart": 60,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{slice a 1}}',\n\t\t\tinput: { a: 'Praesent' },\n\t\t\toutput: 'raesent',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{slice a 1 3}}',\n\t\t\tinput: { a: 'Praesent' },\n\t\t\toutput: 'ra',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{slice a 1}}',\n\t\t\tinput: { a: [ 3, 2, 1 ] },\n\t\t\toutput: '2,1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{slice a 1 2}}',\n\t\t\tinput: { a: [ 3, 2, 1 ] },\n\t\t\toutput: '2',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{slice a 0 1}}',\n\t\t\tinput: { a: [ 3, 2, 1 ] },\n\t\t\toutput: '3',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{slice a -1}}',\n\t\t\tinput: { a: [ 3, 2, 1 ] },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#slice a 1}}|{{this}}|{{else}}no{{/slice}}',\n\t\t\tinput: { a: [ 3, 2, 1 ] },\n\t\t\toutput: '|2||1|',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#slice a 1}}|{{this}}|{{else}}no{{/slice}}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 691,
    "codeStart": 692,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{slugify a}}',\n\t\t\tinput: { a: 'Perché l\\'erba è verde?' },\n\t\t\toutput: 'perche-l-erba-e-verde',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{slugify a}}',\n\t\t\tinput: { a: 'Tänk efter nu – förr\\'n vi föser dig bort ' },\n\t\t\toutput: 'tank-efter-nu-forr-n-vi-foser-dig-bort',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{slugify a}}',\n\t\t\tinput: { a: 'You+can|use/spaces\\\\for/the delimiter' },\n\t\t\toutput: 'you-can-use-spaces-for-the-delimiter',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{slugify a}}',\n\t\t\tinput: { a: 'A_MiXeD-separator + delimiter/example' },\n\t\t\toutput: 'a_mixed-separator-delimiter-example',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{slugify a}}',\n\t\t\tinput: { a: 'аз буки веди' },\n\t\t\toutput: 'az-buki-vedi',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{slugify a}}',\n\t\t\tinput: { a: 'рцы слово твердо' },\n\t\t\toutput: 'rtsi-slovo-tverdo',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{slugify a}}',\n\t\t\tinput: { a: 'цы червь ша ер ять ю' },\n\t\t\toutput: 'tsi-cherv-sha-er-yat-yu',\n\t\t},\n\n\t\t{\n\t\t\ttemplate: '{{slugify a}}',\n\t\t\tinput: { a: 'ΧΕΙΜΕΡΙΝΌΣ, θαλασσινή' },\n\t\t\toutput: 'cheimerinos-thalassini',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{slugify a}}',\n\t\t\tinput: { a: 'Δωματίου, ΎΨΟΣ, φιλοξενία' },\n\t\t\toutput: 'domatiou-upsos-filoxenia',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{slugify a}}',\n\t\t\tinput: { a: 'ευήλιος, αύρα, ζέστη' },\n\t\t\toutput: 'euilios-aura-zesti',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections"
      },
      {
        "type": "signature",
        "string": "{{sort input[ key]}}"
      },
      {
        "type": "param",
        "string": "{array<mixed>} input",
        "name": "input",
        "description": "",
        "types": "array.<mixed>",
        "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} [key] If the input is a collection of objects, pass this argument to indicate what key should be compared.",
        "name": "key",
        "description": "If the input is a collection of objects, pass this argument to indicate what key should be compared.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{array}",
        "types": "array",
        "typesDescription": "<code>array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#sort input[ key]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/sort}}"
      }
    ],
    "description": {
      "full": "<p>Sorts the provided array.\nMay be used inline or as an iterator. Else condition evaluates if result is empty.</p>\n",
      "summary": "Sorts the provided array.\nMay be used inline or as an iterator. Else condition evaluates if result is empty.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 17,
    "code": "function sort (...args) {\n  const options = args.pop();\n\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"sort\" needs at least 1 parameter');\n  }\n\n  const [ input, key ] = args;\n\n  const results = sortUtil(input, key);\n\n  if (!options.fn) {\n    return results;\n  }\n\n  if (sizeOf(results)) {\n    var data = Handlebars.createFrame(options.data);\n    return map(results, (result, k, i) => {\n      data.index = i;\n      data.key = k;\n      data.first = (i === 0);\n      data.last  = (i === results.length - 1);\n      return options.fn(result, { data });\n    }).join('');\n  }\n  return options.inverse(this);\n\n};",
    "ctx": {
      "type": "function",
      "name": "sort",
      "string": "sort()"
    },
    "filename": "src/kit/sort.js",
    "signatures": [
      {
        "signature": "{{sort input[ key]}}",
        "params": [
          {
            "type": "param",
            "string": "{array<mixed>} input",
            "name": "input",
            "description": "",
            "types": "array.<mixed>",
            "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} [key] If the input is a collection of objects, pass this argument to indicate what key should be compared.",
            "name": "key",
            "description": "If the input is a collection of objects, pass this argument to indicate what key should be compared.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{array}",
          "types": "array",
          "typesDescription": "<code>array</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#sort input[ key]}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/sort}}",
        "params": [],
        "examples": []
      }
    ],
    "aliases": "",
    "category": [
      "collections"
    ],
    "name": "sort",
    "id": "functionsort"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 45,
    "codeStart": 46,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{sort a }}',\n\t\t\tinput: { a: [ 1, 2, 3 ] },\n\t\t\toutput: '1,2,3',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{sort a}}',\n\t\t\tinput: { a: [ 3, 2, 1 ] },\n\t\t\toutput: '1,2,3',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{sort a}}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#sort a \"a\"}}|{{#each this}}{{@key}}:{{this}},{{/each}}|{{else}}no{{/sort}}',\n\t\t\tinput: { a: [ { a: 4 }, { a: 3 }, { b: 1 } ] },\n\t\t\toutput: '|a:3,||a:4,||b:1,|',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#sort a}}|{{this}}|{{else}}no{{/sort}}',\n\t\t\tinput: { a: [] },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "signature",
        "string": "{{split input[ delimiter]}}"
      },
      {
        "type": "param",
        "string": "{string} input",
        "name": "input",
        "description": "",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} [delimiter] Defaults to ',' if not provided.",
        "name": "delimiter",
        "description": "Defaults to ',' if not provided.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{array<string>}",
        "types": "array.<string>",
        "typesDescription": "<code>array</code>.&lt;<code>string</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#split input[ delimiter]}}<TEMPLATE>{{/split}}"
      }
    ],
    "description": {
      "full": "<p>Splits a string into an array.\nMay be used inline or as an iterator. Else condition will never evaluate.</p>\n",
      "summary": "Splits a string into an array.\nMay be used inline or as an iterator. Else condition will never evaluate.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 17,
    "code": "function split (...args) {\n\n  const options = args.pop();\n  const [ input, delimiter ] = args;\n\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"split\" needs at least 1 parameter');\n  }\n\n  if (!isString(input)) {\n    console.trace('Handlebars Helper \"split\" did not receive a string'); // eslint-disable-line no-console\n    return '';\n  }\n\n  var results = input.split(delimiter);\n\n  if (!options.fn) {\n    return results;\n  }\n  var data = Handlebars.createFrame(options.data);\n  return map(results, (result, key, i) => {\n    data.index = i;\n    data.key = key;\n    data.first = (i === 0);\n    data.last  = (i === results.length - 1);\n    return options.fn(result, { data });\n  }).join('');\n\n};",
    "ctx": {
      "type": "function",
      "name": "split",
      "string": "split()"
    },
    "filename": "src/kit/split.js",
    "signatures": [
      {
        "signature": "{{split input[ delimiter]}}",
        "params": [
          {
            "type": "param",
            "string": "{string} input",
            "name": "input",
            "description": "",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} [delimiter] Defaults to ',' if not provided.",
            "name": "delimiter",
            "description": "Defaults to ',' if not provided.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{array<string>}",
          "types": "array.<string>",
          "typesDescription": "<code>array</code>.&lt;<code>string</code>&gt;",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#split input[ delimiter]}}<TEMPLATE>{{/split}}",
        "params": [],
        "examples": []
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "split",
    "id": "functionsplit"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 46,
    "codeStart": 47,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{split a \",\"}}',\n\t\t\tinput: { a: '1,2,3' },\n\t\t\toutput: '1,2,3',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#split a \",\"}}<{{this}}>{{else}}no{{/split}}',\n\t\t\tinput: { a: '1,2,3' },\n\t\t\toutput: '<1><2><3>',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "startsWith"
      },
      {
        "type": "signature",
        "string": "{{startsWith haystack needle}}"
      },
      {
        "type": "param",
        "string": "{string} haystack String to search inside",
        "name": "haystack",
        "description": "String to search inside",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} needle String to search for. If `regex=true` then the string is evaluated as a regular expression.",
        "name": "needle",
        "description": "String to search for. If `regex=true` then the string is evaluated as a regular expression.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "describe",
        "string": "Returns true if the haystack ends with the needle"
      },
      {
        "type": "return",
        "string": "{boolean}",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#startsWith haystack needle}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/startsWith}}"
      },
      {
        "type": "param",
        "string": "{string} haystack String to search inside",
        "name": "haystack",
        "description": "String to search inside",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} needle String to search for. If `regex=true` then the string is evaluated as a regular expression.",
        "name": "needle",
        "description": "String to search for. If `regex=true` then the string is evaluated as a regular expression.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "describe",
        "string": "If the string does contain that value, block will evaluate with the result value as the current context ({this})."
      }
    ],
    "description": {
      "full": "<p>Tests if the haystack starts with the needle</p>\n",
      "summary": "Tests if the haystack starts with the needle",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 22,
    "code": "function startsWith (...args) {\n  if (args.length !== 3) {\n    throw new Error('Handlebars Helper \"endsWith\" needs 2 parameters');\n  }\n\n  const options = args.pop();\n  const [ haystack, needle ] = args;\n  let result;\n\n  if (isArray(haystack)) {\n    result = haystack[0] === needle;\n  } else if (isString(haystack)) {\n    result = haystack.startsWith(needle);\n  } else {\n    result = false;\n  }\n\n  if (!options.fn) {\n    return result || '';\n  }\n\n  return result ? options.fn(this) : options.inverse(this);\n};",
    "ctx": {
      "type": "function",
      "name": "startsWith",
      "string": "startsWith()"
    },
    "filename": "src/kit/startsWith.js",
    "signatures": [
      {
        "signature": "{{startsWith haystack needle}}",
        "params": [
          {
            "type": "param",
            "string": "{string} haystack String to search inside",
            "name": "haystack",
            "description": "String to search inside",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} needle String to search for. If `regex=true` then the string is evaluated as a regular expression.",
            "name": "needle",
            "description": "String to search for. If `regex=true` then the string is evaluated as a regular expression.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>Returns true if the haystack ends with the needle</p>\n",
        "returns": {
          "type": "return",
          "string": "{boolean}",
          "types": "boolean",
          "typesDescription": "<code>boolean</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#startsWith haystack needle}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/startsWith}}",
        "params": [
          {
            "type": "param",
            "string": "{string} haystack String to search inside",
            "name": "haystack",
            "description": "String to search inside",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string} needle String to search for. If `regex=true` then the string is evaluated as a regular expression.",
            "name": "needle",
            "description": "String to search for. If `regex=true` then the string is evaluated as a regular expression.",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "description": "<p>If the string does contain that value, block will evaluate with the result value as the current context ({this}).</p>\n"
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "startsWith",
    "id": "functionstartsWith"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 45,
    "codeStart": 46,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{startsWith a b}}',\n\t\t\tinput: { a: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et', b: 'Pr' },\n\t\t\toutput: 'true',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{startsWith a b}}',\n\t\t\tinput: { a: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et', b: 'pr' },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{startsWith a b}}',\n\t\t\tinput: { a: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et', b: 'ra' },\n\t\t\toutput: '',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#startsWith a b}}yes{{else}}no{{/startsWith}}',\n\t\t\tinput: { a: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et', b: 'Pr' },\n\t\t\toutput: 'yes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#startsWith a b}}yes{{else}}no{{/startsWith}}',\n\t\t\tinput: { a: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et', b: 'ra' },\n\t\t\toutput: 'no',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections"
      },
      {
        "type": "name",
        "string": "stringify"
      },
      {
        "type": "signature",
        "string": "{{stringify input [pretty]}}"
      },
      {
        "type": "param",
        "string": "{mixed} input    Value to be stringified",
        "name": "input",
        "description": "Value to be stringified",
        "types": "mixed",
        "typesDescription": "<a href=\"mixed.html\">mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} pretty Controls if the json should be tab indented.",
        "name": "pretty",
        "description": "Controls if the json should be tab indented.",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string} The formatted JSON.",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "The formatted JSON."
      }
    ],
    "description": {
      "full": "<p>Converts the passed value into JSON.\nDoes not support block syntax.</p>\n",
      "summary": "Converts the passed value into JSON.\nDoes not support block syntax.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 16,
    "code": "function stringify (...args) {\n  args.pop();\n  const [ input, pretty ] = args;\n\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"stringify\" needs at least 1 parameter');\n  }\n\n  return new Handlebars.SafeString(JSON.stringify(input, undefined, pretty));\n};",
    "ctx": {
      "type": "function",
      "name": "stringify",
      "string": "stringify()"
    },
    "filename": "src/kit/stringify.js",
    "signatures": [
      {
        "signature": "{{stringify input [pretty]}}",
        "params": [
          {
            "type": "param",
            "string": "{mixed} input    Value to be stringified",
            "name": "input",
            "description": "Value to be stringified",
            "types": "mixed",
            "typesDescription": "<a href=\"mixed.html\">mixed</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{boolean} pretty Controls if the json should be tab indented.",
            "name": "pretty",
            "description": "Controls if the json should be tab indented.",
            "types": "boolean",
            "typesDescription": "<code>boolean</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string} The formatted JSON.",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": "The formatted JSON."
        }
      }
    ],
    "aliases": "",
    "category": [
      "collections"
    ],
    "name": "stringify",
    "id": "functionstringify"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 27,
    "codeStart": 28,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{stringify a}}',\n\t\t\tinput: { a: 1 },\n\t\t\toutput: '1',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{stringify a}}',\n\t\t\tinput: { a: '1' },\n\t\t\toutput: '\"1\"',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{stringify a}}',\n\t\t\tinput: { a: [ 'a', 'b' ] },\n\t\t\toutput: '[\"a\",\"b\"]',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{stringify a}}',\n\t\t\tinput: { a: { b: 1, c: '2' } },\n\t\t\toutput: '{\"b\":1,\"c\":\"2\"}',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "math"
      },
      {
        "type": "name",
        "string": "sub"
      },
      {
        "type": "signature",
        "string": "{{sub value1 value2 ... valueN}}"
      },
      {
        "type": "param",
        "string": "{number} value1",
        "name": "value1",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} value2",
        "name": "value2",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} [valueN]",
        "name": "valueN",
        "description": "",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{number}",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Subtracts one or more values from the first value\nIf more than two values are provided, the result of the previous subtraction will be subtracted from the next.</p>\n",
      "summary": "Subtracts one or more values from the first value\nIf more than two values are provided, the result of the previous subtraction will be subtracted from the next.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 18,
    "code": "function sub (...args) {\n  args.pop();\n\n  if (args.length < 2 && !isArray(args[0])) {\n    throw new Error('Handlebars Helper \"sub\" needs 1 parameter minimum');\n  }\n\n  args = flatten(args);\n\n  const initial = args.shift();\n  return args.reduce((a, b) => a - b, initial);\n};",
    "ctx": {
      "type": "function",
      "name": "sub",
      "string": "sub()"
    },
    "filename": "src/kit/sub.js",
    "signatures": [
      {
        "signature": "{{sub value1 value2 ... valueN}}",
        "params": [
          {
            "type": "param",
            "string": "{number} value1",
            "name": "value1",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} value2",
            "name": "value2",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{number} [valueN]",
            "name": "valueN",
            "description": "",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": true,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{number}",
          "types": "number",
          "typesDescription": "<code>number</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "math"
    ],
    "name": "sub",
    "id": "functionsub"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 30,
    "codeStart": 31,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{sub a b c d}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 4, c: 5, d: 6 },\n\t\t\toutput: '-19',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{sub a b}}',\n\t\t\tinput: { a: [ 1, 2, 3 ], b: 0 },\n\t\t\toutput: '-4',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{sub a}}',\n\t\t\tinput: { a: [ 1, 2, 3 ] },\n\t\t\toutput: '-4',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{sub a b}}',\n\t\t\tinput: { a: 10, b: 2 },\n\t\t\toutput: '8',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "time"
      },
      {
        "type": "signature",
        "string": "{{time milliseconds [short=1] [detailed=1]}}"
      },
      {
        "type": "param",
        "string": "{number} milliseconds [description]",
        "name": "milliseconds",
        "description": "[description]",
        "types": "number",
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} short [description]",
        "name": "short",
        "description": "[description]",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Convert a millisecond count into human readable time (minutes, hours, days)\nIf the <code>short</code> parameter is truthy, then the function will use abbreviated duration units.\nBy default the function returns the first major unit. If the <code>detailed</code> parameter is truthy,\nthis will be extended to the smallest unit.</p>\n",
      "summary": "Convert a millisecond count into human readable time (minutes, hours, days)\nIf the `short` parameter is truthy, then the function will use abbreviated duration units.\nBy default the function returns the first major unit. If the `detailed` parameter is truthy,\nthis will be extended to the smallest unit.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 17,
    "code": "function time (...args) {\n  const options = args.pop();\n\n  if (!args.length) {\n    throw new Error('Handlebars Helper \"time\" needs 1 parameter');\n  }\n\n  let [ milliseconds ] = args;\n\n  var keysL = [ 'Year',      'Month',    'Week',    'Day',    'Hour',    'Minute',    'Second', 'Millisecond' ];\n  var keysS = [ 'yr',        'mo',       'wk',      'd',      'h',       'm',         's',      'ms' ];\n  var divs  = [ 31536000000, 2592000000, 604800000, 86400000, 3600000,   60000,       1000,     1 ];\n  var stack = [];\n  var level = 0;\n  var value;\n\n  const short = args[1] || options.hash && options.hash.short;\n  const detailed = options.hash && options.hash.detailed;\n  const keys = short ? keysS : keysL;\n\n  milliseconds = Math.abs(milliseconds);\n\n  while (milliseconds) {\n    value = Math.floor(milliseconds / divs[level]);\n    milliseconds = milliseconds % divs[level];\n    if (value) {\n      let pushable = [ value, keys[level] ].join(short ? '' : ' ');\n      if (!short && value > 1) pushable += 's';\n      stack.push(pushable);\n      if (!detailed) break;\n    }\n    level++;\n  }\n\n  return stack.join(' ');\n\n};",
    "ctx": {
      "type": "function",
      "name": "time",
      "string": "time()"
    },
    "filename": "src/kit/time.js",
    "signatures": [
      {
        "signature": "{{time milliseconds [short=1] [detailed=1]}}",
        "params": [
          {
            "type": "param",
            "string": "{number} milliseconds [description]",
            "name": "milliseconds",
            "description": "[description]",
            "types": "number",
            "typesDescription": "<code>number</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{boolean} short [description]",
            "name": "short",
            "description": "[description]",
            "types": "boolean",
            "typesDescription": "<code>boolean</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "time",
    "id": "functiontime"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 54,
    "codeStart": 55,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{time a}}',\n\t\t\tinput: { a: 5 },\n\t\t\toutput: '5 Milliseconds',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{time a}}',\n\t\t\tinput: { a: 1000 },\n\t\t\toutput: '1 Second',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{time a}}',\n\t\t\tinput: { a: 2000 },\n\t\t\toutput: '2 Seconds',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{time a}}',\n\t\t\tinput: { a: 60000 },\n\t\t\toutput: '1 Minute',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{time a}}',\n\t\t\tinput: { a: 60 * 65 * 1000 },\n\t\t\toutput: '1 Hour',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{seconds a true}}',\n\t\t\tinput: { a: 60 * 65 },\n\t\t\toutput: '1h',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{seconds a detailed=true}}',\n\t\t\tinput: { a: 60 * 65 },\n\t\t\toutput: '1 Hour 5 Minutes',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{time a}}',\n\t\t\tinput: { a: 60 * 60 * 24 * 1000 },\n\t\t\toutput: '1 Day',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{time a}}',\n\t\t\tinput: { a: 60 * 60 * 24 * 7 * 1000 },\n\t\t\toutput: '1 Week',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{time a}}',\n\t\t\tinput: { a: 60 * 60 * 24 * 30 * 1000 },\n\t\t\toutput: '1 Month',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{time a}}',\n\t\t\tinput: { a: 60 * 60 * 24 * 365 * 1000 },\n\t\t\toutput: '1 Year',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{time a}}',\n\t\t\tinput: { a: 60 * 60 * 24 * 365 * 100 * 1000 },\n\t\t\toutput: '100 Years',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "ucfirst"
      },
      {
        "type": "signature",
        "string": "{{ucfirst input}}"
      },
      {
        "type": "param",
        "string": "{string} input",
        "name": "input",
        "description": "",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#ucfirst}}<TEMPLATE>{{/ucfirst}}"
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Uppercase the first letter of a string or content block</p>\n",
      "summary": "Uppercase the first letter of a string or content block",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 18,
    "code": "function ucfirst (...args) {\n  const options = args.pop();\n\n  if (options.fn) return uc(options.fn(this));\n\n  if (args.length) {\n    return uc(args[0]);\n  }\n\n  throw new Error('Handlebars Helper \"ucfirst\" needs 1 parameter minimum if not used as a block helper');\n};",
    "ctx": {
      "type": "function",
      "name": "ucfirst",
      "string": "ucfirst()"
    },
    "filename": "src/kit/ucfirst.js",
    "signatures": [
      {
        "signature": "{{ucfirst input}}",
        "params": [
          {
            "type": "param",
            "string": "{string} input",
            "name": "input",
            "description": "",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#ucfirst}}<TEMPLATE>{{/ucfirst}}",
        "params": [],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "ucfirst",
    "id": "functionucfirst"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 29,
    "codeStart": 30,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{ucfirst a}}',\n\t\t\tinput: { a: 'praesent commodo cursus magna, vel scelerisque nisl consectetur et' },\n\t\t\toutput: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#ucfirst}}{{a}}{{/ucfirst}}',\n\t\t\tinput: { a: 'praesent commodo cursus magna, vel scelerisque nisl consectetur et' },\n\t\t\toutput: 'Praesent commodo cursus magna, vel scelerisque nisl consectetur et',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "ucsentences"
      },
      {
        "type": "signature",
        "string": "{{ucsentences input}}"
      },
      {
        "type": "param",
        "string": "{string} input",
        "name": "input",
        "description": "",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#ucsentences}}<TEMPLATE>{{/ucsentences}}"
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Uppercase the first letter of every sentence in a string or content block</p>\n",
      "summary": "Uppercase the first letter of every sentence in a string or content block",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 18,
    "code": "function ucsentences (...args) {\n  const options = args.pop();\n\n  if (options.fn) return uc(options.fn(this));\n\n  if (args.length) {\n    return uc(args[0]);\n  }\n\n  throw new Error('Handlebars Helper \"ucsentences\" needs 1 parameter minimum if not used as a block helper');\n};",
    "ctx": {
      "type": "function",
      "name": "ucsentences",
      "string": "ucsentences()"
    },
    "filename": "src/kit/ucsentences.js",
    "signatures": [
      {
        "signature": "{{ucsentences input}}",
        "params": [
          {
            "type": "param",
            "string": "{string} input",
            "name": "input",
            "description": "",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#ucsentences}}<TEMPLATE>{{/ucsentences}}",
        "params": [],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "ucsentences",
    "id": "functionucsentences"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 29,
    "codeStart": 30,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{ucsentences a}}',\n\t\t\tinput: { a: 'praesent commodo cursus magna. vel scelerisque nisl consectetur et' },\n\t\t\toutput: 'Praesent commodo cursus magna. Vel scelerisque nisl consectetur et',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#ucsentences}}{{a}}{{/ucsentences}}',\n\t\t\tinput: { a: 'praesent commodo cursus magna. vel scelerisque nisl consectetur et' },\n\t\t\toutput: 'Praesent commodo cursus magna. Vel scelerisque nisl consectetur et',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "ucwords"
      },
      {
        "type": "signature",
        "string": "{{ucwords input}}"
      },
      {
        "type": "param",
        "string": "{string} input",
        "name": "input",
        "description": "",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#ucwords}}<TEMPLATE>{{/ucwords}}"
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Uppercase the first letter of every word in a string or content block</p>\n",
      "summary": "Uppercase the first letter of every word in a string or content block",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6,
    "codeStart": 18,
    "code": "function ucwords (...args) {\n  const options = args.pop();\n\n  if (options.fn) return uc(options.fn(this));\n\n  if (args.length) {\n    return uc(args[0]);\n  }\n\n  throw new Error('Handlebars Helper \"ucwords\" needs 1 parameter minimum if not used as a block helper');\n};",
    "ctx": {
      "type": "function",
      "name": "ucwords",
      "string": "ucwords()"
    },
    "filename": "src/kit/ucwords.js",
    "signatures": [
      {
        "signature": "{{ucwords input}}",
        "params": [
          {
            "type": "param",
            "string": "{string} input",
            "name": "input",
            "description": "",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#ucwords}}<TEMPLATE>{{/ucwords}}",
        "params": [],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "ucwords",
    "id": "functionucwords"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 29,
    "codeStart": 30,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{ucwords a}}',\n\t\t\tinput: { a: 'praesent commodo cursus magna, vel scelerisque nisl consectetur et' },\n\t\t\toutput: 'Praesent Commodo Cursus Magna, Vel Scelerisque Nisl Consectetur Et',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#ucwords}}{{a}}{{/ucwords}}',\n\t\t\tinput: { a: 'praesent commodo cursus magna, vel scelerisque nisl consectetur et' },\n\t\t\toutput: 'Praesent Commodo Cursus Magna, Vel Scelerisque Nisl Consectetur Et',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "uppercase"
      },
      {
        "type": "signature",
        "string": "{{uppercase input}}"
      },
      {
        "type": "param",
        "string": "{string} input",
        "name": "input",
        "description": "",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#uppercase}}<TEMPLATE>{{/uppercase}}"
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Uppercase the a string or content block</p>\n",
      "summary": "Uppercase the a string or content block",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 16,
    "code": "function uppercase (...args) {\n  const options = args.pop();\n\n  if (options.fn) return String(options.fn(this)).toUpperCase();\n\n  if (args.length) {\n    return String(args[0]).toUpperCase();\n  }\n\n  throw new Error('Handlebars Helper \"uppercase\" needs 1 parameter minimum if not used as a block helper');\n};",
    "ctx": {
      "type": "function",
      "name": "uppercase",
      "string": "uppercase()"
    },
    "filename": "src/kit/uppercase.js",
    "signatures": [
      {
        "signature": "{{uppercase input}}",
        "params": [
          {
            "type": "param",
            "string": "{string} input",
            "name": "input",
            "description": "",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#uppercase}}<TEMPLATE>{{/uppercase}}",
        "params": [],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "uppercase",
    "id": "functionuppercase"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 27,
    "codeStart": 28,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{uppercase a}}',\n\t\t\tinput: { a: 'praesent commodo cursus magna, vel scelerisque nisl consectetur et' },\n\t\t\toutput: 'PRAESENT COMMODO CURSUS MAGNA, VEL SCELERISQUE NISL CONSECTETUR ET',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#uppercase}}{{a}}{{/uppercase}}',\n\t\t\tinput: { a: 'praesent commodo cursus magna, vel scelerisque nisl consectetur et' },\n\t\t\toutput: 'PRAESENT COMMODO CURSUS MAGNA, VEL SCELERISQUE NISL CONSECTETUR ET',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "urldecode"
      },
      {
        "type": "signature",
        "string": "{{urldecode input}}"
      },
      {
        "type": "param",
        "string": "{string} input",
        "name": "input",
        "description": "",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#urldecode}}<TEMPLATE>{{/urldecode}}"
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Parses URI encoded string back into its original format</p>\n",
      "summary": "Parses URI encoded string back into its original format",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 16,
    "code": "function urldecode (...args) {\n  const options = args.pop();\n\n  if (options.fn) return decodeURIComponent(options.fn(this));\n\n  if (args.length) {\n    return decodeURIComponent(args[0]);\n  }\n\n  throw new Error('Handlebars Helper \"urldecode\" needs 1 parameter minimum if not used as a block helper');\n};",
    "ctx": {
      "type": "function",
      "name": "urldecode",
      "string": "urldecode()"
    },
    "filename": "src/kit/urldecode.js",
    "signatures": [
      {
        "signature": "{{urldecode input}}",
        "params": [
          {
            "type": "param",
            "string": "{string} input",
            "name": "input",
            "description": "",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#urldecode}}<TEMPLATE>{{/urldecode}}",
        "params": [],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "urldecode",
    "id": "functionurldecode"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 27,
    "codeStart": 28,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{{urldecode a}}}',\n\t\t\tinput: { a: 'praesent123~!%40%23%24%25%5E%26*()%7B%7D%5B%5D%3D%3A%2F%2C%3B%3F%2B\\'%22%5C' },\n\t\t\toutput: 'praesent123~!@#$%^&*(){}[]=:/,;?+\\'\"\\\\',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#urldecode}}{{{a}}}{{/urldecode}}',\n\t\t\tinput: { a: 'praesent123~!%40%23%24%25%5E%26*()%7B%7D%5B%5D%3D%3A%2F%2C%3B%3F%2B\\'%22%5C' },\n\t\t\toutput: 'praesent123~!@#$%^&*(){}[]=:/,;?+\\'\"\\\\',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "strings"
      },
      {
        "type": "name",
        "string": "urlencode"
      },
      {
        "type": "signature",
        "string": "{{urlencode input}}"
      },
      {
        "type": "param",
        "string": "{string} input",
        "name": "input",
        "description": "",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#urlencode}}<TEMPLATE>{{/urlencode}}"
      },
      {
        "type": "return",
        "string": "{string}",
        "types": "string",
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Encodes a string into a URL safe format that can be decoded.</p>\n",
      "summary": "Encodes a string into a URL safe format that can be decoded.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 16,
    "code": "function urlencode (...args) {\n  const options = args.pop();\n\n  if (options.fn) return encodeURIComponent(options.fn(this));\n\n  if (args.length) {\n    return encodeURIComponent(args[0]);\n  }\n\n  throw new Error('Handlebars Helper \"urlencode\" needs 1 parameter minimum if not used as a block helper');\n};",
    "ctx": {
      "type": "function",
      "name": "urlencode",
      "string": "urlencode()"
    },
    "filename": "src/kit/urlencode.js",
    "signatures": [
      {
        "signature": "{{urlencode input}}",
        "params": [
          {
            "type": "param",
            "string": "{string} input",
            "name": "input",
            "description": "",
            "types": "string",
            "typesDescription": "<code>string</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#urlencode}}<TEMPLATE>{{/urlencode}}",
        "params": [],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{string}",
          "types": "string",
          "typesDescription": "<code>string</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      }
    ],
    "aliases": "",
    "category": [
      "strings"
    ],
    "name": "urlencode",
    "id": "functionurlencode"
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 27,
    "codeStart": 28,
    "code": "}\n\nexport function test (t) {\n\tt.multi(\n\t\t{\n\t\t\ttemplate: '{{{urlencode a}}}',\n\t\t\tinput: { a: 'praesent123~!@#$%^&*(){}[]=:/,;?+\\'\"\\\\' },\n\t\t\toutput: 'praesent123~!%40%23%24%25%5E%26*()%7B%7D%5B%5D%3D%3A%2F%2C%3B%3F%2B\\'%22%5C',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{urlencode a}}',\n\t\t\tinput: { a: 'praesent123~!@#$%^&*(){}[]=:/,;?+\\'\"\\\\' },\n\t\t\toutput: 'praesent123~!%40%23%24%25%5E%26*()%7B%7D%5B%5D%3D%3A%2F%2C%3B%3F%2B&#x27;%22%5C',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#urlencode}}{{{a}}}{{/urlencode}}',\n\t\t\tinput: { a: 'praesent123~!@#$%^&*(){}[]=:/,;?+\\'\"\\\\' },\n\t\t\toutput: 'praesent123~!%40%23%24%25%5E%26*()%7B%7D%5B%5D%3D%3A%2F%2C%3B%3F%2B\\'%22%5C',\n\t\t},\n\t\t{\n\t\t\ttemplate: '{{#urlencode}}{{a}}{{/urlencode}}',\n\t\t\tinput: { a: 'praesent123~!@#$%^&*(){}[]=:/,;?+\\'\"\\\\' },\n\t\t\toutput: 'praesent123~!%40%23%24%25%5E%26amp%3B*()%7B%7D%5B%5D%26%23x3D%3B%3A%2F%2C%3B%3F%2B%26%23x27%3B%26quot%3B%5C',\n\t\t},\n\t);\n}",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "collections"
      },
      {
        "type": "signature",
        "string": "{{values input}}"
      },
      {
        "type": "param",
        "string": "{array<mixed>|object} input",
        "name": "input",
        "description": "",
        "types": "array.<mixed>, object",
        "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{array<mixed>}",
        "types": "array.<mixed>",
        "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#values}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/values}}"
      }
    ],
    "description": {
      "full": "<p>Returns the values of an array or object.\nMay be used inline or as an iterator. Else condition evaluates if result is empty.</p>\n",
      "summary": "Returns the values of an array or object.\nMay be used inline or as an iterator. Else condition evaluates if result is empty.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5,
    "codeStart": 16,
    "code": "function values (...args) {\n  const options = args.pop();\n  const [ input ] = args;\n\n  if (!options.fn) {\n    return valuesUtil(input);\n  }\n\n  if (sizeOf(input)) {\n    var data = Handlebars.createFrame(options.data);\n    return map(input, (v, k, i) => {\n      data.index = i;\n      data.key = k;\n      data.first = (i === 0);\n      data.last  = (i === input.length - 1);\n      return options.fn(v, { data });\n    }).join('');\n  }\n  return options.inverse(this);\n};",
    "ctx": {
      "type": "function",
      "name": "values",
      "string": "values()"
    },
    "filename": "src/kit/values.js",
    "signatures": [
      {
        "signature": "{{values input}}",
        "params": [
          {
            "type": "param",
            "string": "{array<mixed>|object} input",
            "name": "input",
            "description": "",
            "types": "array.<mixed>, object",
            "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;|<code>object</code>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{array<mixed>}",
          "types": "array.<mixed>",
          "typesDescription": "<code>array</code>.&lt;<a href=\"mixed.html\">mixed</a>&gt;",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#values}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/values}}",
        "params": [],
        "examples": []
      }
    ],
    "aliases": "",
    "category": [
      "collections"
    ],
    "name": "values",
    "id": "functionvalues"
  },
  {
    "tags": [
      {
        "type": "category",
        "string": "logic"
      },
      {
        "type": "signature",
        "string": "{{lte value test}}"
      },
      {
        "type": "param",
        "string": "{string|integer} value1",
        "name": "value1",
        "description": "",
        "types": "string, integer",
        "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string|integer} value2",
        "name": "value2",
        "description": "",
        "types": "string, integer",
        "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean}",
        "types": "boolean",
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "signature",
        "string": "{{#lte value test}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/lte}}"
      }
    ],
    "description": {
      "full": "<p>Tests if the first argument is less than or equal to the second argument.\nMay be used inline or as a conditional block.</p>\n",
      "summary": "Tests if the first argument is less than or equal to the second argument.\nMay be used inline or as a conditional block.",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4,
    "codeStart": 17,
    "code": "function lte (a, b, options) {\n  if (arguments.length !== 3) {\n    throw new Error('Handlebars Helper \"lte\" needs 2 parameters');\n  }\n\n  if (!options.fn) return a <= b || '';\n  if (a <= b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n\n};",
    "ctx": {
      "type": "function",
      "name": "lte",
      "string": "lte()"
    },
    "filename": "src/kit/lte.js",
    "signatures": [
      {
        "signature": "{{lte value test}}",
        "params": [
          {
            "type": "param",
            "string": "{string|integer} value1",
            "name": "value1",
            "description": "",
            "types": "string, integer",
            "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          },
          {
            "type": "param",
            "string": "{string|integer} value2",
            "name": "value2",
            "description": "",
            "types": "string, integer",
            "typesDescription": "<code>string</code>|<a href=\"integer.html\">integer</a>",
            "optional": false,
            "nullable": false,
            "nonNullable": false,
            "variable": false
          }
        ],
        "examples": [],
        "returns": {
          "type": "return",
          "string": "{boolean}",
          "types": "boolean",
          "typesDescription": "<code>boolean</code>",
          "optional": false,
          "nullable": false,
          "nonNullable": false,
          "variable": false,
          "description": ""
        }
      },
      {
        "signature": "{{#lte value test}}<TEMPLATE>[{{else}}<TEMPLATE>]{{/lte}}",
        "params": [],
        "examples": []
      }
    ],
    "aliases": "",
    "category": [
      "logic"
    ],
    "name": "lte",
    "id": "functionlte"
  }
]